digraph "adore::env::OCRoadBasedPrediction"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{adore::env::OCRoadBasedPrediction\n|- t_max_utc_\l- lat_precision_\l- lat_error_\l- lon_error_\l- v_max_\l- a_max_\l- a_min_\l- angle_error_max_\l- time_headway_\l- time_leeway_\l- delay_\l- lane_width_predictions_\l- lateral_predictions_\l- width_ub_\l- width_lb_\l|+ setAngleErrorMax()\l+ setTMaxUTC()\l+ setLatPrecision()\l+ setLatError()\l+ setLonError()\l+ setVMax()\l+ setAMax()\l+ setAMin()\l+ setTimeHeadway()\l+ setTimeLeeway()\land 19 more...\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{adore::env::OCPrediction\lStrategy\< traffic::Participant \>\n||+ predict()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1OCPredictionStrategy.html",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -trafficMap_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{adore::env::traffic\l::TrafficMap\n|- borderToParticipant_\l- participantToBorder_\l- trackingIDToParticipant_\l- participantSet_\l|+ getTrafficParticipantSet()\l+ getBorderSet()\l+ getBorderToParticipant()\l+ getParticipantToBorder()\l+ getTrackingIDToParticipant()\l+ TrafficMap()\l+ TrafficMap()\l+ update()\l+ matchBorders()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1traffic_1_1TrafficMap.html",tooltip=" "];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -tpsetReader_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{adore::mad::AReader\< T \>\n||+ hasData()\l+ hasUpdate()\l+ getData()\l+ getDesc()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AReader.html",tooltip=" "];
  Node5 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -borderSet_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{adore::env::BorderBased\l::BorderSet\n|# m_coord_uncertainty_xy\l# m_coord_uncertainty_z\l# m_guard\l# m_max_lane_width\l# m_byID\l# m_byLeftID\l# m_byFirstCoord\l# m_byLastCoord\l# m_byRegion\l# m_isOwner\l- m_allowedBorderTypes\l|+ BorderSet()\l+ ~BorderSet()\l+ addAllowedType()\l+ rotate()\l+ translate()\l+ removeAllowedType()\l+ borderTypeValid()\l+ setIsOwner()\l+ insert_border()\l+ erase_border()\land 46 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1BorderSet.html",tooltip="efficiently store borders in boost R-tree"];
}
