digraph "adore::if_ROS::LVProviderNode"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{adore::if_ROS::LVProviderNode\n||+ LVProviderNode()\l+ init()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{adore::if_ROS::FactoryCollection\n|- nh_\l|+ FactoryCollection()\l+ init()\l+ getFactory()\l+ getParamsFactory()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1if__ROS_1_1FactoryCollection.html",tooltip=" "];
  Node3 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{adore_if_ros_scheduling\l::Baseapp\n|- timers_\l- useScheduler_\l- rate_\l- m_pN\l|+ Baseapp()\l+ init()\l+ initSim()\l+ resume()\l+ pause()\l+ run()\l+ addTimerCallback()\l+ getParam()\l+ getParam()\l+ schedulerCallback()\l+ getRosNodeHandle()\l+ func()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore__if__ros__scheduling_1_1Baseapp.html",tooltip=" "];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -snm_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{adore_if_ros_scheduling\l::SchedulerNotificationManager\n|- m_pN\l- m_notificationWriter\l- m_clientNameWriter\l|+ SchedulerNotificationManager()\l+ publishClientName()\l+ registerAtScheduler()\l+ notifyScheduler()\l+ pause()\l+ resume()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore__if__ros__scheduling_1_1SchedulerNotificationManager.html",tooltip=" "];
  Node5 -> Node4 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{adore_scheduling::AScheduler\lNotificationManager\n|# m_duration\l# m_pause\l|+ ASchedulerNotificationManager()\l+ publishClientName()\l+ registerAtScheduler()\l+ notifyScheduler()\l+ pause()\l+ resume()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore__scheduling_1_1ASchedulerNotificationManager.html",tooltip=" "];
  Node6 -> Node5 [color="grey25",fontsize="10",style="solid",label=" #m_sn" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{adore_scheduling::Scheduler\lNotification\n|- m_identifier\l- m_upperTimeLimitSec\l- m_upperTimeLimitNsec\l|+ SchedulerNotification()\l+ SchedulerNotification()\l+ getUpperTimeLimitSec()\l+ getUpperTimeLimitNsec()\l+ getUpperTimeLimitPair()\l+ setUpperTimeLimit()\l+ setZero()\l+ getID()\l+ setID()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore__scheduling_1_1SchedulerNotification.html",tooltip=" "];
  Node7 -> Node4 [color="grey25",fontsize="10",style="solid",label=" -m_schedulerNotification\lConversion" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{adore_if_ros_scheduling\l::SchedulerNotificationConversion\n||+ operator()()\l+ operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore__if__ros__scheduling_1_1SchedulerNotificationConversion.html",tooltip=" "];
  Node8 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +lvp_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{adore::apps::LaneViewProvider\n|- activate_lfg_rematching_\l|+ LaneViewProvider()\l+ ~LaneViewProvider()\l+ run()\l+ copy_ilcg()\l+ copy_lfg_to_lfg_proxy()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1apps_1_1LaneViewProvider.html",tooltip="A node which computes lanefollowing and lanechange geometry and provides the results to subsequent mo..."];
  Node9 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -reset_reader_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{adore::mad::AReader\< T \>\n||+ hasData()\l+ hasUpdate()\l+ getData()\l+ getDesc()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AReader.html",tooltip=" "];
  Node10 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -apVehicle_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{adore::params::APVehicle\n||+ get_vehicle_id()\l+ get_a()\l+ get_b()\l+ get_c()\l+ get_d()\l+ get_m()\l+ get_mu()\l+ get_g()\l+ get_h()\l+ get_cf()\land 17 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APVehicle.html",tooltip="abstract class for vehicle configuration related paremeters"];
  Node11 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -writer_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{adore::mad::AWriter\< T \>\n||+ canWriteMore()\l+ write()\l+ getDesc()\l+ getNumberOfSubscribers()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AWriter.html",tooltip=" "];
  Node12 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -apTacticalPlanner_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{adore::params::APTactical\lPlanner\n||+ getGlobalSpeedLimit()\l+ getResetRadius()\l+ getAccLatUB()\l+ getAccLatUB_minVelocity()\l+ getAccLonUB()\l+ getAccLonLB()\l+ getFrontTimeGap()\l+ getRearTimeGap()\l+ getFrontSGap()\l+ getLowerBoundFrontSGapForLF()\land 20 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APTacticalPlanner.html",tooltip="abstract classs containing parameters to configure aspects and constraints of the tactical planner"];
  Node13 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -speedlimit_manager_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 [label="{adore::env::SpeedLimitManagement\n|- known_speed_limits\l- default_speed_limit_\l|+ SpeedLimitManagement()\l+ setDefaultValue()\l+ update()\l+ getFunction()\l- isOnLane()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1SpeedLimitManagement.html",tooltip="automatically manage speed limit information based on current vehicle position"];
  Node14 -> Node13 [color="grey25",fontsize="10",style="solid",label=" -speedlimit_feed_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 [label="{adore::mad::AFeed\< T \>\n||+ hasNext()\l+ getNext()\l+ getLatest()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AFeed.html",tooltip=" "];
  Node15 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -apLateralPlanner_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 [label="{adore::params::APLateral\lPlanner\n||+ getWeightPos()\l+ getWeightVel()\l+ getWeightAcc()\l+ getWeightJerk()\l+ getWeightEndPos()\l+ getWeightEndVel()\l+ getWeightEndAcc()\l+ getSlackPos()\l+ getSlackVel()\l+ getSlackAcc()\land 14 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APLateralPlanner.html",tooltip="abstract class containing parameters related to configuring the lateral planner"];
  Node16 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -apLFV_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node16 [label="{adore::params::APLaneFollowingView\n||+ getLookAhead()\l+ getLookBehind()\l+ getPlanningTime()\l+ getBaselineFitSmoothness()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APLaneFollowingView.html",tooltip="abstract class containing parameters for a lane following view"];
  Node17 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -lcg_left_\n-lcg_right_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node17 [label="{adore::env::BorderBased\l::LaneChangeGeometry\n|+ m_s_lane_width_open\l+ m_s_lane_width_closed\l+ m_s_viewing_distance\l+ m_lfg_adjacency_i0\l+ m_lfg_adjacency_i1\l+ m_adjacency_s0\l+ m_adjacency_s1\l+ m_borderSubSet\l+ m_borderSequence\l+ m_innerBorderSequence\l+ m_direction\l+ m_vehicle_width\l+ m_view_valid\l|+ LaneChangeGeometry()\l+ isValid()\l+ clearGeometry()\l+ update()\l+ getInnerBorders()\l+ getOuterBorders()\l+ getLeftBorders()\l+ getRightBorders()\l+ getViewingDistance()\l+ getLCDirection()\land 7 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1LaneChangeGeometry.html",tooltip="A class with a geometry description of a lane next to the current lane."];
  Node18 -> Node17 [color="grey25",fontsize="10",style="solid",label=" +m_lfg_adjacency_bn0\n+m_lfg_adjacency_bn1" ,arrowhead="odiamond",fontname="Helvetica"];
  Node18 [label="{adore::env::BorderBased\l::Node\n|+ m_g\l+ m_h\l|+ Node()\l+ Node()\l+ Node()\l+ setBorder()\l+ setG()\l+ setH()\l+ setSuccessor()\l+ setPredecessor()\l+ g()\l+ h()\l+ f()\l+ operator\<()\l+ operator\>()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1BorderBased_1_1Node.html",tooltip=" "];
  Node18 -> Node18 [color="grey25",fontsize="10",style="solid",label=" +m_predecessor\n+m_successor" ,arrowhead="odiamond",fontname="Helvetica"];
  Node19 -> Node18 [color="grey25",fontsize="10",style="solid",label=" +m_border" ,arrowhead="odiamond",fontname="Helvetica"];
  Node19 [label="{adore::env::BorderBased\l::Border\n|+ m_type\l|+ Border()\l+ ~Border()\l+ operator=()\l+ Border()\l+ Border()\l+ Border()\l+ Border()\l+ Border()\l+ Border()\l+ Border()\land 30 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1BorderBased_1_1Border.html",tooltip="The border struct contains data of the smallest."];
  Node20 -> Node19 [color="grey25",fontsize="10",style="solid",label=" +m_path" ,arrowhead="odiamond",fontname="Helvetica"];
  Node20 [label="{adore::mad::LLinearPiecewise\lFunctionM\< T, n \>\n|- m_data\l- m_searchIndex\l|+ getData()\l+ getData()\l+ findIndex()\l+ f()\l+ limitHi()\l+ limitLo()\l+ setLimits()\l+ create_derivative()\l+ bound()\l+ limit_s_to_bounds()\land 42 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1LLinearPiecewiseFunctionM.html",tooltip=" "];
  Node21 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node21 [label="{adore::mad::AScalarToN\l\< T, n \>\n||+ toArray()\l+ toArray()\l+ dimension()\l+ fi()\l+ multiply()\l+ add()\l+ operator*=()\l+ operator+=()\l+ operator-=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AScalarToN.html",tooltip=" "];
  Node22 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node22 [label="{adore::mad::ALFunction\l\< T, adoreMatrix\< T, N,\l 1 \> \>\n|- cached_ymin\l- cached_ymax\l- cached_bounds_valid\l|+ setLimits()\l+ limitHi()\l+ limitLo()\l+ f()\l+ f()\l+ clone()\l+ create_derivative()\l+ bound()\l+ bound()\l+ ~ALFunction()\l+ ALFunction()\l+ operator()()\l+ isInDomain()\l+ f_bounded()\l+ invalidateCachedBounds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1ALFunction.html",tooltip=" "];
  Node23 -> Node20 [color="grey25",fontsize="10",style="solid",label=" -single_dimensions" ,arrowhead="odiamond",fontname="Helvetica"];
  Node23 [label="{adore::mad::LLinearPiecewise\lFunctionM\< T, n \>::OneDimension\n|- m_row\l|+ OneDimension()\l+ OneDimension()\l+ f()\l+ limitHi()\l+ limitLo()\l+ setLimits()\l+ clone()\l+ create_derivative()\l+ bound()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1LLinearPiecewiseFunctionM_1_1OneDimension.html",tooltip=" "];
  Node24 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node24 [label="{adore::mad::ALFunction\l\< DT, T \>\n|- cached_ymin\l- cached_ymax\l- cached_bounds_valid\l|+ setLimits()\l+ limitHi()\l+ limitLo()\l+ f()\l+ f()\l+ clone()\l+ create_derivative()\l+ bound()\l+ bound()\l+ ~ALFunction()\l+ ALFunction()\l+ operator()()\l+ isInDomain()\l+ f_bounded()\l+ invalidateCachedBounds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1ALFunction.html",tooltip=" "];
  Node20 -> Node23 [color="grey25",fontsize="10",style="solid",label=" -m_parent" ,arrowhead="odiamond",fontname="Helvetica"];
  Node25 -> Node19 [color="grey25",fontsize="10",style="solid",label=" +m_id\n+m_left" ,arrowhead="odiamond",fontname="Helvetica"];
  Node25 [label="{adore::env::BorderBased\l::BorderID\n||+ BorderID()\l+ BorderID()\l+ translate()\l+ distance()\l+ distance()\l+ getLength()\l+ rotate()\l+ operator==()\l+ inverse()\l+ operator\<()\l+ toString()\l+ isInArea()\l+ getReverseDirectionID()\l+ getReverseDirectionID()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1BorderBased_1_1BorderID.html",tooltip="This struct identifies a Border by the coordinates of the starting and the end point."];
  Node26 -> Node25 [color="grey25",fontsize="10",style="solid",label=" +m_first\n+m_last" ,arrowhead="odiamond",fontname="Helvetica"];
  Node26 [label="{adore::env::BorderBased\l::Coordinate\n|+ m_X\l+ m_Y\l+ m_Z\l|+ Coordinate()\l+ Coordinate()\l+ Coordinate()\l+ Coordinate()\l+ translate()\l+ rotate()\l+ discretize()\l+ distance()\l+ isNear()\l+ operator==()\land 8 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1BorderBased_1_1Coordinate.html",tooltip="This struct represents 3-dimensional coordines."];
  Node20 -> Node17 [color="grey25",fontsize="10",style="solid",label=" +m_centerBorderDistance\l_fct\n+m_centerBorder_fct\n+m_leftBorderDistance\l_fct\n+m_leftBorder_fct\n+m_reference_fct\n+m_rightBorderDistance\l_fct\n+m_rightBorder_fct" ,arrowhead="odiamond",fontname="Helvetica"];
  Node19 -> Node17 [color="grey25",fontsize="10",style="solid",label=" +m_lfg_adjacency_b0\n+m_lfg_adjacency_b1" ,arrowhead="odiamond",fontname="Helvetica"];
  Node27 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -indicatorhint_manager_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node27 [label="{adore::env::IndicatorHint\lManagement\n|- known_hints\l|+ IndicatorHintManagement()\l+ update()\l+ getFunctions()\l- isOnLane()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1IndicatorHintManagement.html",tooltip="automatically manage indicator hints based on current vehicle position"];
  Node14 -> Node27 [color="grey25",fontsize="10",style="solid",label=" -indicatorhint_feed_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node28 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -roadmap_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node28 [label="{adore::env::BorderBased\l::LocalRoadMap\n|- lanesNearVehicle_\l|+ LocalRoadMap()\l+ getEgoState()\l+ getBorderSet()\l+ getPrecedenceSet()\l+ getVehicleState()\l+ getVehicleParameters()\l+ getBorderTrace()\l+ getMatchedBorder()\l+ getBorderCostMap()\l+ isNavigationActive()\l+ getNavigationCost()\l+ updateEgoState()\l+ update()\l+ getControlledConnectionSet()\l- updateData()\l- discard_radius_based()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1LocalRoadMap.html",tooltip=" "];
  Node29 -> Node28 [color="grey25",fontsize="10",style="solid",label=" -borderTrace_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node29 [label="{adore::env::BorderBased\l::BorderTrace\n|- m_trace\l- m_distance_limit\l- m_length\l|+ BorderTrace()\l+ BorderTrace()\l+ setDistanceLimit()\l+ getDistanceLimit()\l+ insert()\l+ begin()\l+ end()\l+ rbegin()\l+ rend()\l+ clear()\l+ front()\l+ back()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1BorderTrace.html",tooltip=" "];
  Node9 -> Node28 [color="grey25",fontsize="10",style="solid",label=" -vehicleReader_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node30 -> Node28 [color="grey25",fontsize="10",style="solid",label=" -egoState_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node30 [label="{adore::env::VehicleMotion\lState9d\n|+ time_\l+ data_\l|+ getTime()\l+ getX()\l+ getY()\l+ getZ()\l+ getPSI()\l+ getvx()\l+ getvy()\l+ getOmega()\l+ getAx()\l+ getDelta()\land 10 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1VehicleMotionState9d.html",tooltip="This struct holds the motion state of the vehicle in 9d."];
  Node31 -> Node28 [color="grey25",fontsize="10",style="solid",label=" -precedenceSet_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node31 [label="{adore::env::PrecedenceSet\n|- precedenceRT_\l|+ PrecedenceSet()\l+ PrecedenceSet()\l+ update()\l+ readFile()\l+ parseRule()\l+ insertRule()\l+ init()\l+ contains()\l+ eraseRule()\l+ getRulesInRegion()\l+ getAllRulesIt()\l+ getAllRules()\l+ getRulesOutsideRegion()\l+ refocus()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1PrecedenceSet.html",tooltip="PrecedenceSet contains PrecedenceRules, indexed by the area they affect."];
  Node32 -> Node31 [color="grey25",fontsize="10",style="solid",label=" -ruleFeed_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node32 [label="{adore::mad::AFeed\<\l adore::env::PrecedenceRule \>\n||+ hasNext()\l+ getNext()\l+ getLatest()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AFeed.html",tooltip=" "];
  Node33 -> Node28 [color="grey25",fontsize="10",style="solid",label=" -borderSet_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node33 [label="{adore::env::BorderBased\l::BorderSet\n|# m_coord_uncertainty_xy\l# m_coord_uncertainty_z\l# m_guard\l# m_max_lane_width\l# m_byID\l# m_byLeftID\l# m_byFirstCoord\l# m_byLastCoord\l# m_byRegion\l# m_isOwner\l- m_allowedBorderTypes\l|+ BorderSet()\l+ ~BorderSet()\l+ addAllowedType()\l+ rotate()\l+ translate()\l+ removeAllowedType()\l+ borderTypeValid()\l+ setIsOwner()\l+ insert_border()\l+ erase_border()\land 46 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1BorderSet.html",tooltip="efficiently store borders in boost R-tree"];
  Node10 -> Node28 [color="grey25",fontsize="10",style="solid",label=" -apVehicle_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node34 -> Node28 [color="grey25",fontsize="10",style="solid",label=" -borderCostMap_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node34 [label="{adore::env::BorderBased\l::BorderCostMap\n||+ getRandomBorderIDCostPair()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1BorderCostMap.html",tooltip=" "];
  Node35 -> Node34 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node35 [label="{std::unordered_map\l\< BorderID, adore::env\l::NavigationCost, adore\l::env::BorderBased::BorderIDHasher \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node14 -> Node28 [color="grey25",fontsize="10",style="solid",label=" -borderFeed_\n-navigationDataFeed_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node36 -> Node28 [color="grey25",fontsize="10",style="solid",label=" -lms_continuation_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node36 [label="{adore::env::BorderBased\l::LMSContinuation\n|- m_lastMatch_initialized\l- m_delayedSwitching\l- m_a\l- m_b\l- m_c\l- m_d\l- m_w\l|+ LMSContinuation()\l+ setDimensions()\l+ getBestMatch()\l+ reset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1LMSContinuation.html",tooltip=" "];
  Node37 -> Node36 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node37 [label="{adore::env::BorderBased\l::LaneMatchingStrategy\n||+ getBestMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1LaneMatchingStrategy.html",tooltip=" "];
  Node33 -> Node36 [color="grey25",fontsize="10",style="solid",label=" -m_borderSet" ,arrowhead="odiamond",fontname="Helvetica"];
  Node25 -> Node36 [color="grey25",fontsize="10",style="solid",label=" -m_lastMatch" ,arrowhead="odiamond",fontname="Helvetica"];
  Node38 -> Node36 [color="grey25",fontsize="10",style="solid",label=" -m_nearestLaneStragey" ,arrowhead="odiamond",fontname="Helvetica"];
  Node38 [label="{adore::env::BorderBased\l::LMSNearest\n|- m_w_orientation\l|+ LMSNearest()\l+ getBestMatch()\l+ getBestMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1LMSNearest.html",tooltip=" "];
  Node37 -> Node38 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node33 -> Node38 [color="grey25",fontsize="10",style="solid",label=" -m_borderSet" ,arrowhead="odiamond",fontname="Helvetica"];
  Node19 -> Node28 [color="grey25",fontsize="10",style="solid",label=" -matchedLane_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node39 -> Node28 [color="grey25",fontsize="10",style="solid",label=" -connectionSet_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node39 [label="{adore::env::ControlledConnectionSet\n|- feeds_\l- max_value_\l|+ ControlledConnectionSet()\l+ ~ControlledConnectionSet()\l+ update()\l+ getConnectionsInRegion()\l+ size()\l+ getAllConnections()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1ControlledConnectionSet.html",tooltip=" "];
  Node40 -> Node39 [color="grey25",fontsize="10",style="solid",label=" -data_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node40 [label="{adore::env::LocalBoxSet\l\< ControlledConnection,\l BoxGen, Comparator \>\n|- data_\l|+ insert()\l+ find()\l+ contains()\l+ remove()\l+ size()\l+ getObjectsInRegion()\l+ getObjectsOutsideRegion()\l+ refocus()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1LocalBoxSet.html",tooltip=" "];
  Node41 -> Node40 [color="grey25",fontsize="10",style="solid",label=" -compare_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node41 [label="{adore::env::ControlledConnection\lSet::Comparator\n||+ operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1ControlledConnectionSet_1_1Comparator.html",tooltip=" "];
  Node43 -> Node28 [color="grey25",fontsize="10",style="solid",label=" -apLocalRoadMap_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node43 [label="{adore::params::APLocalRoadMap\n||+ getDiscardRadius()\l+ isNavigationActive()\l+ getBorderTraceLength()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APLocalRoadMap.html",tooltip="abstract class to configure the local view of the road map"];
  Node44 -> Node28 [color="grey25",fontsize="10",style="solid",label=" -lms_navigation_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node44 [label="{adore::env::BorderBased\l::LMSNavigation\n|- m_lastMatch_initialized\l|+ LMSNavigation()\l+ getBestMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1LMSNavigation.html",tooltip=" "];
  Node37 -> Node44 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node33 -> Node44 [color="grey25",fontsize="10",style="solid",label=" -m_borderSet" ,arrowhead="odiamond",fontname="Helvetica"];
  Node34 -> Node44 [color="grey25",fontsize="10",style="solid",label=" -m_borderID2Cost" ,arrowhead="odiamond",fontname="Helvetica"];
  Node36 -> Node44 [color="grey25",fontsize="10",style="solid",label=" -m_continuationStrategy" ,arrowhead="odiamond",fontname="Helvetica"];
  Node25 -> Node44 [color="grey25",fontsize="10",style="solid",label=" -m_lastMatch" ,arrowhead="odiamond",fontname="Helvetica"];
  Node45 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -ilcg_left_\n-ilcg_right_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node45 [label="{adore::env::BorderBased\l::IndependentLaneChangeGeometry\n|+ navigationCost_fcn\l_available_\l+ maximum_navcost_increase_\l- valid_\l- progressGateOpen_\l- progressGateClosed_\l|+ setSmoothness()\l+ setMaximumNavCostIncrease()\l+ setLookAhead()\l+ setLookBehind()\l+ isValid()\l+ getProgressGateOpen()\l+ getProgressGateClosed()\l+ isNavigationCostFcnAvailable()\l+ getLeftOffsetFct()\l+ getRightOffsetFct()\land 13 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1IndependentLaneChangeGeometry.html",tooltip="A class for computation of the geometric information required to perform lane changes...."];
  Node20 -> Node45 [color="grey25",fontsize="10",style="solid",label=" +navigationCost_fct\l_\n+offsetSeparatingBorders\l_\n+offsetSourceOuterBorders\l_\n+offsetTargetOuterBorders\l_\n+speedLimit_fct_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node33 -> Node45 [color="grey25",fontsize="10",style="solid",label=" -borderSet_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node34 -> Node45 [color="grey25",fontsize="10",style="solid",label=" -borderCostMap_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node46 -> Node45 [color="grey25",fontsize="10",style="solid",label=" +lcb_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node46 [label="{adore::env::BorderBased\l::LaneChangeBorders\n|+ gate_target_borders_\l+ gate_source_borders_\l+ downstream_borders_\l+ upstream_borders_\l- lc_direction_left_\l- lookahead_\l- lookbehind_\l- progress_in_gate_\l- remaining_in_gate_\l- downstream_length_\l- distance_to_current_\l- valid_\l- continueOnIncreasingCost_\l|+ LaneChangeBorders()\l+ isLCDirectionLeft()\l+ isValid()\l+ getProgressInGate()\l+ getRemainingInGate()\l+ getDownstreamLength()\l+ getDistanceToCurrent()\l+ getLookAhead()\l+ setLookAhead()\l+ getLookBehind()\land 6 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1LaneChangeBorders.html",tooltip="Selects Borders from BorderSet required for LaneChangeView construction."];
  Node33 -> Node46 [color="grey25",fontsize="10",style="solid",label=" -borderSet_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node34 -> Node46 [color="grey25",fontsize="10",style="solid",label=" -borderCostMap_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node47 -> Node45 [color="grey25",fontsize="10",style="solid",label=" +baseline_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node47 [label="{adore::env::BorderBased\l::Baseline\n|+ breaks_s_\l+ breaks_x_\l+ breaks_y_\l+ breaks_z_\l+ samples_s_\l+ samples_x_\l+ samples_dx_\l+ samples_ddx_\l+ samples_dddx_\l+ samples_y_\land 12 more...\l- nFitPoints_\l- nSamplesPoints_\l- fit_smoothness_\l- lookbehind_\l- lookahead_\l- min_length_\l- valid_\l|+ Baseline()\l+ resize()\l+ setSmoothness()\l+ isValid()\l+ getLookAhead()\l+ getLookBehind()\l+ setLookAhead()\l+ setLookBehind()\l+ getNSamplePoints()\l+ getNFitPoints()\l+ update()\l+ computeDerivatives()\l+ defineOffset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1Baseline.html",tooltip="A local, non-linear, smooth road coordinate system generated from a sequence of borders."];
  Node20 -> Node47 [color="grey25",fontsize="10",style="solid",label=" +curvatureDerivative\l_fct_\n+curvature_fct_\n+normal_fct_\n+position_fct_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node48 -> Node45 [color="grey25",fontsize="10",style="solid",label=" +navigationCostBorders\l_\n+separatingBorders\l_\n+sourceOuterBorders\l_\n+targetOuterBorders_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node48 [label="{adore::env::BorderBased\l::BorderSequence\n||+ getLength()\l+ sample()\l+ beginLines()\l+ endLines()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1BorderSequence.html",tooltip="A class which augments a vector of Border* with some sampling features."];
  Node49 -> Node48 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node49 [label="{std::vector\< Border * \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node50 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -apLCV_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node50 [label="{adore::params::APLaneChangeView\n||+ getLookAhead()\l+ getLookBehind()\l+ getMaximumNavCostLoss()\l+ getBaselineFitSmoothness()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APLaneChangeView.html",tooltip="abstract class containing parameters for a lane change view"];
  Node51 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -lfg_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node51 [label="{adore::env::BorderBased\l::LaneFollowingGeometry\l\< 20, 200 \>\n|+ m_velocity_fct\l+ m_leftBorder_fct\l+ m_rightBorder_fct\l+ m_centerRaw_fct\l+ m_centerSmoothed_fct\l+ m_centerSmoothedDerivative1_fct\l+ m_centerSmoothedDerivative2_fct\l+ m_centerNormal_fct\l+ m_centerHeading_fct\l+ m_centerSmoothedCurvature_fct\land 28 more...\l|+ LaneFollowingGeometry()\l+ update()\l+ computeNavigationCost()\l+ excludeObstaclePoint()\l+ getRightBorders()\l+ getLeftBorders()\l+ getBestMatchingBorder()\l+ isValid()\l+ getViewingDistance()\l+ getSMax()\land 17 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1LaneFollowingGeometry.html",tooltip=" "];
}
