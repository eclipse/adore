digraph "adore::if_ROS::PlotLanesNode"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{adore::if_ROS::PlotLanesNode\n||+ PlotLanesNode()\l+ init()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{adore::if_ROS::FactoryCollection\n|- nh_\l|+ FactoryCollection()\l+ init()\l+ getFactory()\l+ getParamsFactory()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1if__ROS_1_1FactoryCollection.html",tooltip=" "];
  Node3 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{adore_if_ros_scheduling\l::Baseapp\n|- timers_\l- useScheduler_\l- rate_\l- m_pN\l|+ Baseapp()\l+ init()\l+ initSim()\l+ resume()\l+ pause()\l+ run()\l+ addTimerCallback()\l+ getParam()\l+ getParam()\l+ schedulerCallback()\l+ getRosNodeHandle()\l+ func()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore__if__ros__scheduling_1_1Baseapp.html",tooltip=" "];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -snm_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{adore_if_ros_scheduling\l::SchedulerNotificationManager\n|- m_pN\l- m_notificationWriter\l- m_clientNameWriter\l|+ SchedulerNotificationManager()\l+ publishClientName()\l+ registerAtScheduler()\l+ notifyScheduler()\l+ pause()\l+ resume()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore__if__ros__scheduling_1_1SchedulerNotificationManager.html",tooltip=" "];
  Node5 -> Node4 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{adore_scheduling::AScheduler\lNotificationManager\n|# m_duration\l# m_pause\l|+ ASchedulerNotificationManager()\l+ publishClientName()\l+ registerAtScheduler()\l+ notifyScheduler()\l+ pause()\l+ resume()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore__scheduling_1_1ASchedulerNotificationManager.html",tooltip=" "];
  Node6 -> Node5 [color="grey25",fontsize="10",style="solid",label=" #m_sn" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{adore_scheduling::Scheduler\lNotification\n|- m_identifier\l- m_upperTimeLimitSec\l- m_upperTimeLimitNsec\l|+ SchedulerNotification()\l+ SchedulerNotification()\l+ getUpperTimeLimitSec()\l+ getUpperTimeLimitNsec()\l+ getUpperTimeLimitPair()\l+ setUpperTimeLimit()\l+ setZero()\l+ getID()\l+ setID()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore__scheduling_1_1SchedulerNotification.html",tooltip=" "];
  Node7 -> Node4 [color="grey25",fontsize="10",style="solid",label=" -m_schedulerNotification\lConversion" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{adore_if_ros_scheduling\l::SchedulerNotificationConversion\n||+ operator()()\l+ operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore__if__ros__scheduling_1_1SchedulerNotificationConversion.html",tooltip=" "];
  Node8 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +app_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{adore::apps::PlotLanes\n|- plot_tags_old_\l- plot_tags_current_\l- prefix_\l- fov_width_\l- fov_height_\l- plotMap_\l|+ PlotLanes()\l+ ~PlotLanes()\l+ run()\l- unfocus()\l- isVisible()\l- setVisible()\l- getName()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1apps_1_1PlotLanes.html",tooltip="a optimzed plotting application to plot map borders, vehicles and environment information and backgro..."];
  Node9 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -figure_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{DLR_TS::PlotLab::AFigureStub\n||+ ~AFigureStub()\l+ circlestrip()\l+ tristrip()\l+ tristrip()\l+ tristrip()\l+ patch()\l+ patch()\l+ patch()\l+ plot()\l+ plot()\land 27 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classDLR__TS_1_1PlotLab_1_1AFigureStub.html",tooltip=" "];
  Node10 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -position_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{adore::env::VehicleMotion\lState9d\n|+ time_\l+ data_\l|+ getTime()\l+ getX()\l+ getY()\l+ getZ()\l+ getPSI()\l+ getvx()\l+ getvy()\l+ getOmega()\l+ getAx()\l+ getDelta()\land 10 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1VehicleMotionState9d.html",tooltip="This struct holds the motion state of the vehicle in 9d."];
  Node11 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -borderSet_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{adore::env::BorderBased\l::BorderSet\n|# m_coord_uncertainty_xy\l# m_coord_uncertainty_z\l# m_guard\l# m_max_lane_width\l# m_byID\l# m_byLeftID\l# m_byFirstCoord\l# m_byLastCoord\l# m_byRegion\l# m_isOwner\l- m_allowedBorderTypes\l|+ BorderSet()\l+ ~BorderSet()\l+ addAllowedType()\l+ rotate()\l+ translate()\l+ removeAllowedType()\l+ borderTypeValid()\l+ setIsOwner()\l+ insert_border()\l+ erase_border()\land 46 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1BorderSet.html",tooltip="efficiently store borders in boost R-tree"];
  Node12 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -positionReader_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{adore::mad::AReader\l\< adore::env::VehicleMotion\lState9d \>\n||+ hasData()\l+ hasUpdate()\l+ getData()\l+ getDesc()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AReader.html",tooltip=" "];
  Node13 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -pvehicle_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 [label="{adore::params::APVehicle\n||+ get_vehicle_id()\l+ get_a()\l+ get_b()\l+ get_c()\l+ get_d()\l+ get_m()\l+ get_mu()\l+ get_g()\l+ get_h()\l+ get_cf()\land 17 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APVehicle.html",tooltip="abstract class for vehicle configuration related paremeters"];
  Node14 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -config_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 [label="{adore::PLOT::LanePlotConfig\n|+ border_outer_left_plotoptions\l+ border_outer_right\l_plotoptions\l+ lane_fill_driveable\l_plotoptions\l+ lane_fill_emergency\l_plotoptions\l+ lane_fill_other_plotoptions\l+ lane_fill_default_plotoptions\l+ setpoint_plotoptions\l+ plot_emergency_lane\l+ plot_other_lane\l+ plot_drive_lane\l+ plot_traffic_lights\l|+ LanePlotConfig()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1PLOT_1_1LanePlotConfig.html",tooltip=" "];
  Node15 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -pmap_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 [label="{adore::params::APMapProvider\n||+ getVisibiltyRadius()\l+ getActivatePlotting()\l+ getPlotCompleteMapInLocal\lView()\l+ useScenarioManagerMap()\l+ getXODRLoaderPointsPerBorder()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APMapProvider.html",tooltip="abstract class containing parameters to configure aspects of the map provider"];
  Node16 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -borderfeed_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node16 [label="{adore::mad::AFeed\<\l adore::env::BorderBased\l::Border \>\n||+ hasNext()\l+ getNext()\l+ getLatest()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AFeed.html",tooltip=" "];
}
