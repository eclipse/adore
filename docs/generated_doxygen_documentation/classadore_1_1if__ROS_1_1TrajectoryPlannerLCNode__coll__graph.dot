digraph "adore::if_ROS::TrajectoryPlannerLCNode"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{adore::if_ROS::Trajectory\lPlannerLCNode\n||+ init()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{adore::if_ROS::FactoryCollection\n|- nh_\l|+ FactoryCollection()\l+ init()\l+ getFactory()\l+ getParamsFactory()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1if__ROS_1_1FactoryCollection.html",tooltip=" "];
  Node3 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{adore_if_ros_scheduling\l::Baseapp\n|- timers_\l- useScheduler_\l- rate_\l- m_pN\l|+ Baseapp()\l+ init()\l+ initSim()\l+ resume()\l+ pause()\l+ run()\l+ addTimerCallback()\l+ getParam()\l+ getParam()\l+ schedulerCallback()\l+ getRosNodeHandle()\l+ func()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore__if__ros__scheduling_1_1Baseapp.html",tooltip=" "];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -snm_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{adore_if_ros_scheduling\l::SchedulerNotificationManager\n|- m_pN\l- m_notificationWriter\l- m_clientNameWriter\l|+ SchedulerNotificationManager()\l+ publishClientName()\l+ registerAtScheduler()\l+ notifyScheduler()\l+ pause()\l+ resume()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore__if__ros__scheduling_1_1SchedulerNotificationManager.html",tooltip=" "];
  Node5 -> Node4 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{adore_scheduling::AScheduler\lNotificationManager\n|# m_duration\l# m_pause\l|+ ASchedulerNotificationManager()\l+ publishClientName()\l+ registerAtScheduler()\l+ notifyScheduler()\l+ pause()\l+ resume()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classadore__scheduling_1_1ASchedulerNotificationManager.html",tooltip=" "];
  Node7 -> Node4 [color="grey25",fontsize="10",style="solid",label=" -m_schedulerNotification\lConversion" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{adore_if_ros_scheduling\l::SchedulerNotificationConversion\n||+ operator()()\l+ operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore__if__ros__scheduling_1_1SchedulerNotificationConversion.html",tooltip=" "];
  Node8 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +planner_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{adore::apps::TrajectoryPlannerLC\n|- id_\l- plannerName_\l- directionLeft_\l- gapTrackingActive_\l- lateral_i_grid_\l- const_penalty_\l- gapX_\l- gapY_\l- gapT_\l- gapv_\l- gaps_\l- em_continue_active_\l- em_cancel_active_\l|+ ~TrajectoryPlannerLC()\l+ setEMContinueActive()\l+ setEMCancelActive()\l+ TrajectoryPlannerLC()\l+ setSpeedScale()\l+ setConstPenalty()\l+ computeTrajectory()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1apps_1_1TrajectoryPlannerLC.html",tooltip="Decoupled trajectory planner, which uses TrajectoryPlannerBase to compute and provide a PlanningResul..."];
  Node9 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{adore::apps::TrajectoryPlannerBase\n||+ ~TrajectoryPlannerBase()\l+ TrajectoryPlannerBase()\l+ prime()\l+ planning_request_handler()\l+ computeTrajectory()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1apps_1_1TrajectoryPlannerBase.html",tooltip="Base class for different trajectory planners: Handles communication w/ decision making module...."];
  Node10 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -request_listener_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{adore::mad::AFeedWithCallback\l\< adore::fun::PlanningRequest \>\n||+ hasNext()\l+ setCallback()\l+ getNext()\l+ getLatest()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AFeedWithCallback.html",tooltip=" "];
  Node11 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -result_writer_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{adore::mad::AWriter\l\< adore::fun::PlanningResult \>\n||+ canWriteMore()\l+ write()\l+ getDesc()\l+ getNumberOfSubscribers()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AWriter.html",tooltip=" "];
  Node12 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -ttcCost_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{adore::fun::SPRTTCNominal\n||+ SPRTTCNominal()\l+ getName()\l+ getCost()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1SPRTTCNominal.html",tooltip=" "];
  Node13 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node13 [label="{adore::fun::ASPRCost\n||+ getCost()\l+ getName()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1ASPRCost.html",tooltip=" "];
  Node14 -> Node12 [color="grey25",fontsize="10",style="solid",label=" -pvehicle_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 [label="{adore::params::APVehicle\n||+ get_vehicle_id()\l+ get_a()\l+ get_b()\l+ get_c()\l+ get_d()\l+ get_m()\l+ get_mu()\l+ get_g()\l+ get_h()\l+ get_cf()\land 17 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APVehicle.html",tooltip="abstract class for vehicle configuration related paremeters"];
  Node15 -> Node12 [color="grey25",fontsize="10",style="solid",label=" -predictionView_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 [label="{adore::view::ATrafficPredictionView\n||+ overlapsExpectedBehavior()\l+ overlapsEmergencyBehavior()\l+ getExpectedCollisionTime()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1view_1_1ATrafficPredictionView.html",tooltip=" "];
  Node16 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -pTrajectoryGeneration_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node16 [label="{adore::params::APTrajectory\lGeneration\n||+ get_rho()\l+ getZDIntegrationLength()\l+ getZDIntegrationStep()\l+ getSetPointCount()\l+ getEmergencyManeuverDelay()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APTrajectoryGeneration.html",tooltip="abstract class containing parameters to configure the behaviour of trajectory generation"];
  Node17 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -nominal_planner_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node17 [label="{adore::fun::BasicLaneChange\lPlanner\< 20, 5 \>\n|- nominalReferenceSpeed_\l- breakAtHorizon_\l- curvatureSpeedLimit_\l- lfvSpeedLimit_onTarget_\l- lfvSpeedLimit_onSource_\l- dontDriveBackwards_\l- longitudinalAcceleration\lConstraintUB_\l- longitudinalAcceleration\lConstraintLB_\l- laneWidthSpeedLimitLFV_\l- stopAtBottleneckLFV_\land 17 more...\l|+ BasicLaneChangePlanner()\l+ setGap()\l+ setSpeedScale()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1BasicLaneChangePlanner.html",tooltip=" "];
  Node18 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node18 [label="{adore::fun::DecoupledLFLCPlanner\l\< K, P \>\n|+ N\l+ R\l- progress_solver_\l- offset_solver_\l- s0\l- ds0\l- dds0\l- n0\l- dn0\l- ddn0\l- psi0\l- omega0\l- t0\l- T_\l- T_end_\l- valid_\l- step_\l|+ DecoupledLFLCPlanner()\l+ setPlanningHorizon()\l+ getPlanningHorizon()\l+ getInformationSet()\l+ getProgressSolver()\l+ getOffsetSolver()\l+ getRoadCoordinateConverter()\l+ getStatus()\l+ compute()\l+ hasValidPlan()\l+ getSetPointRequest()\l+ getCPUTime()\l- init_progress_default\l_cost()\l- init_offset_default\l_cost()\l- initialize()\l- prepare_progress_computation()\l- prepare_offset_computation()\l- update_guard()\l- update_progress_parameters()\l- update_offset_parameters()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1DecoupledLFLCPlanner.html",tooltip=" "];
  Node16 -> Node18 [color="grey25",fontsize="10",style="solid",label=" -aptraj_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 -> Node18 [color="grey25",fontsize="10",style="solid",label=" -apvehicle_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node29 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -emergency_planner2_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node29 [label="{adore::fun::ContinueLCMRMPlanner\l\< K, P \>\n||+ ContinueLCMRMPlanner()\l+ setGap()\l+ addConstraint()\l+ addReference()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1ContinueLCMRMPlanner.html",tooltip="Plans minimum risk maneuver to cancel lane change."];
  Node30 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node30 [label="{adore::fun::MRMPlanner\l\< K, P \>\n|+ N\l+ R\l- lateralPlanner_\l- jmax_\l- tstall_\l- astall_\l- amin_\l- second_attempt_\l- longitudinal_plan_valid_\l|+ setJMax()\l+ setTStall()\l+ setAStall()\l+ setAMin()\l+ setSecondAttempt()\l+ MRMPlanner()\l+ getInformationSet()\l+ amin_medium_brake_trapezoidal()\l+ t_short_brake_trapezoidal()\l+ t_medium_brake_trapezoidal()\land 12 more...\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1MRMPlanner.html",tooltip=" "];
  Node16 -> Node30 [color="grey25",fontsize="10",style="solid",label=" -aptraj_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 -> Node30 [color="grey25",fontsize="10",style="solid",label=" -apvehicle_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node40 -> Node29 [color="grey25",fontsize="10",style="solid",label=" -headingConstraintLB\l_\n-headingConstraintUB_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node40 [label="{adore::fun::HeadingConstraint\n|- heading_ub_\l- heading_lb_\l- d_\l|+ HeadingConstraint()\l+ getValue()\l+ update()\l+ getDirection()\l+ getDimension()\l+ getDerivative()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1HeadingConstraint.html",tooltip=" "];
  Node42 -> Node29 [color="grey25",fontsize="10",style="solid",label=" -LaneChangeIntoGapReference_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node42 [label="{adore::fun::LaneChangeInto\lGapReference\n|- width_\l- hard_safety_distance_\l- soft_safety_distance_\l- min_control_space_\l- d_\l- i_grid_\l|+ LaneChangeIntoGapReference()\l+ setGap()\l+ getValueIfAvailable()\l+ update()\l+ getDimension()\l+ getDerivative()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1LaneChangeIntoGapReference.html",tooltip=" "];
  Node44 -> Node42 [color="grey25",fontsize="10",style="solid",label=" -lcv_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node44 [label="{adore::view::ALaneChangeView\n||+ getSourceLane()\l+ getTargetLane()\l+ getLCDirection()\l+ getProgressOfGateOpen()\l+ getProgressOfGateClosed()\l+ getOffsetOfStartOuterBorder()\l+ getOffsetOfSeparatingBorder()\l+ getOffsetOfDestinationOuter\lBorder()\l+ getNavigationCostDifference()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1view_1_1ALaneChangeView.html",tooltip=" "];
  Node14 -> Node42 [color="grey25",fontsize="10",style="solid",label=" -pv_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node46 -> Node29 [color="grey25",fontsize="10",style="solid",label=" -lateralOffsetConstraint\l_left_\n-lateralOffsetConstraint\l_right_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node46 [label="{adore::fun::LateralOffset\lConstraintLC\n|- width_\l- hard_safety_distance_\l- soft_safety_distance_\l- min_control_space_\l- direction_\l|+ LateralOffsetConstraintLC()\l+ setGap()\l+ getValue()\l+ update()\l+ getDirection()\l+ getDimension()\l+ getDerivative()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1LateralOffsetConstraintLC.html",tooltip=" "];
  Node44 -> Node46 [color="grey25",fontsize="10",style="solid",label=" -lcv_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 -> Node46 [color="grey25",fontsize="10",style="solid",label=" -pv_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node47 -> Node29 [color="grey25",fontsize="10",style="solid",label=" -followVehicleConstraint_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node47 [label="{adore::fun::FollowPreceding\lVehicle\n|- s_front_t0_\l- v_front_t0_\l- t0_\l|+ FollowPrecedingVehicle()\l+ getValue()\l+ update()\l+ getDirection()\l+ getDimension()\l+ getDerivative()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1FollowPrecedingVehicle.html",tooltip=" "];
  Node16 -> Node47 [color="grey25",fontsize="10",style="solid",label=" -pgen_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 -> Node47 [color="grey25",fontsize="10",style="solid",label=" -pveh_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node23 -> Node47 [color="grey25",fontsize="10",style="solid",label=" -lane_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node23 [label="{adore::view::ALane\n||+ isValid()\l+ getSMax()\l+ getSMin()\l+ inSRange()\l+ getProgressOfWidthOpen()\l+ getProgressOfWidthClosed()\l+ getOnLaneTraffic()\l+ getConflictSet()\l+ getSpeedLimit()\l+ getLeftIndicatorHint()\land 11 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1view_1_1ALane.html",tooltip=" "];
  Node48 -> Node47 [color="grey25",fontsize="10",style="solid",label=" -ptac_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node48 [label="{adore::params::APTactical\lPlanner\n||+ getGlobalSpeedLimit()\l+ getResetRadius()\l+ getAccLatUB()\l+ getAccLatUB_minVelocity()\l+ getAccLonUB()\l+ getAccLonLB()\l+ getFrontTimeGap()\l+ getRearTimeGap()\l+ getFrontSGap()\l+ getLowerBoundFrontSGapForLF()\land 20 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APTacticalPlanner.html",tooltip="abstract classs containing parameters to configure aspects and constraints of the tactical planner"];
  Node49 -> Node29 [color="grey25",fontsize="10",style="solid",label=" -lateralJerkReference_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node49 [label="{adore::fun::LateralJerkReference\n||+ LateralJerkReference()\l+ getValueIfAvailable()\l+ update()\l+ getDimension()\l+ getDerivative()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1LateralJerkReference.html",tooltip=" "];
  Node23 -> Node49 [color="grey25",fontsize="10",style="solid",label=" -lfv_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node50 -> Node29 [color="grey25",fontsize="10",style="solid",label=" -lateralAccelerationReference_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node50 [label="{adore::fun::LateralAcceleration\lReference\n||+ LateralAccelerationReference()\l+ getValueIfAvailable()\l+ update()\l+ getDimension()\l+ getDerivative()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1LateralAccelerationReference.html",tooltip=" "];
  Node23 -> Node50 [color="grey25",fontsize="10",style="solid",label=" -lfv_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node51 -> Node29 [color="grey25",fontsize="10",style="solid",label=" -lateralAccelerationConstraint\lLB_\n-lateralAccelerationConstraintUB_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node51 [label="{adore::fun::LateralAcceleration\lConstraint\n|- ay_ub_\l- ay_lb_\l- curvature_ub_\l- curvature_lb_\l- d_\l|+ LateralAccelerationConstraint()\l+ getValue()\l+ update()\l+ getDirection()\l+ getDimension()\l+ getDerivative()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1LateralAccelerationConstraint.html",tooltip=" "];
  Node23 -> Node51 [color="grey25",fontsize="10",style="solid",label=" -lfv_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node52 -> Node29 [color="grey25",fontsize="10",style="solid",label=" -lateralReference_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node52 [label="{adore::fun::ContinueLCReference\n||+ ContinueLCReference()\l+ getValueIfAvailable()\l+ update()\l+ getDimension()\l+ getDerivative()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1ContinueLCReference.html",tooltip=" "];
  Node44 -> Node52 [color="grey25",fontsize="10",style="solid",label=" -lcv_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node53 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -emergency_planner1_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node53 [label="{adore::fun::CancelLCMRMPlanner\l\< K, P \>\n||+ CancelLCMRMPlanner()\l+ addConstraint()\l+ addReference()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1CancelLCMRMPlanner.html",tooltip="Plans minimum risk maneuver to cancel lane change."];
  Node30 -> Node53 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node40 -> Node53 [color="grey25",fontsize="10",style="solid",label=" -headingConstraintLB\l_\n-headingConstraintUB_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node54 -> Node53 [color="grey25",fontsize="10",style="solid",label=" -lateralReference_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node54 [label="{adore::fun::CancelMergeReference\n||+ CancelMergeReference()\l+ getValueIfAvailable()\l+ update()\l+ getDimension()\l+ getDerivative()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1CancelMergeReference.html",tooltip=" "];
  Node44 -> Node54 [color="grey25",fontsize="10",style="solid",label=" -lcv_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node46 -> Node53 [color="grey25",fontsize="10",style="solid",label=" -lateralOffsetConstraint\l_left_\n-lateralOffsetConstraint\l_right_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node47 -> Node53 [color="grey25",fontsize="10",style="solid",label=" -followVehicleConstraint_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node49 -> Node53 [color="grey25",fontsize="10",style="solid",label=" -lateralJerkReference_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node50 -> Node53 [color="grey25",fontsize="10",style="solid",label=" -lateralAccelerationReference_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node51 -> Node53 [color="grey25",fontsize="10",style="solid",label=" -lateralAccelerationConstraint\lLB_\n-lateralAccelerationConstraintUB_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node55 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -collision_detection_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node55 [label="{adore::fun::SPRInvariant\lCollisionFreedom\n||+ SPRInvariantCollisionFreedom()\l+ isValid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1SPRInvariantCollisionFreedom.html",tooltip=" "];
  Node56 -> Node55 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node56 [label="{adore::fun::ASPRConstraint\n||+ isValid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1ASPRConstraint.html",tooltip=" "];
  Node57 -> Node55 [color="grey25",fontsize="10",style="solid",label=" -ppred_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node57 [label="{adore::params::APPrediction\n||+ get_roadbased_prediction\l_duration()\l+ get_roadbased_expected\l_acc_ub()\l+ get_roadbased_expected\l_acc_ub_delay()\l+ get_roadbased_expected\l_acc_lb()\l+ get_roadbased_expected\l_vel_ub()\l+ get_roadbased_worstcase\l_acc_ub()\l+ get_roadbased_worstcase\l_acc_ub_delay()\l+ get_roadbased_worstcase\l_acc_lb()\l+ get_roadbased_worstcase\l_vel_ub()\l+ get_roadbased_heading\l_deviation_ub()\land 25 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APPrediction.html",tooltip="parameter interface for parameters related to prediction"];
  Node14 -> Node55 [color="grey25",fontsize="10",style="solid",label=" -pvehicle_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node48 -> Node55 [color="grey25",fontsize="10",style="solid",label=" -ptac_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 -> Node55 [color="grey25",fontsize="10",style="solid",label=" -predictionView_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node58 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -pEmergencyOperation_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node58 [label="{adore::params::APEmergency\lOperation\n||+ getKy()\l+ getKpsi()\l+ getamin()\l+ getamax()\l+ getDeltaMax()\l+ getDeltaMin()\l+ getEmergencyManeuverAMin()\l+ getEmergencyManeuverAMax()\l+ getEmergencyManeuverAStall()\l+ getEmergencyManeuverTStall()\l+ getEmergencyManeuverJMin()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APEmergencyOperation.html",tooltip="abstract class containing parameters concerning emergency operation behaviour"];
  Node14 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -pvehicle_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node59 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -checkPointsOnSourceLane\l_\n-checkPointsOnTargetLane\l_\n-connectionsOnSourceLane\l_\n-connectionsOnTargetLane_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node59 [label="{adore::env::ConnectionsOnLane\n|- mappedcons_\l|+ hasLimitLine()\l+ getLimitLine()\l+ ConnectionsOnLane()\l+ update()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1ConnectionsOnLane.html",tooltip=" "];
  Node60 -> Node59 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node60 [label="{adore::view::ALimitLineEn\lRoute\n||+ hasLimitLine()\l+ getLimitLine()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1view_1_1ALimitLineEnRoute.html",tooltip=" "];
  Node23 -> Node59 [color="grey25",fontsize="10",style="solid",label=" -lane_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node61 -> Node59 [color="grey25",fontsize="10",style="solid",label=" -conset_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node61 [label="{adore::env::ControlledConnectionSet\n|- feeds_\l- max_value_\l|+ ControlledConnectionSet()\l+ ~ControlledConnectionSet()\l+ update()\l+ getConnectionsInRegion()\l+ size()\l+ getAllConnections()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1ControlledConnectionSet.html",tooltip=" "];
  Node48 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -pTacticalPlanner_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node65 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -prediction_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node65 [label="{adore::env::DecoupledTraffic\lPredictionView\n|- expected_predictions_\l- emergency_predictions_\l- static_obstacles_\l|+ DecoupledTrafficPrediction\lView()\l+ update()\l+ overlapsExpectedBehavior()\l+ overlapsEmergencyBehavior()\l+ getExpectedCollisionTime()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1DecoupledTrafficPredictionView.html",tooltip=" "];
  Node15 -> Node65 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node66 -> Node65 [color="grey25",fontsize="10",style="solid",label=" -emergencyReader_\n-expectedReader_\n-staticObstaclesReader_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node66 [label="{adore::mad::AReader\< T \>\n||+ hasData()\l+ hasUpdate()\l+ getData()\l+ getDesc()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AReader.html",tooltip=" "];
  Node67 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -ngo_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node67 [label="{adore::env::NavigationGoal\lObserver\n|- initialized_\l- inview_\l- oncurrentlane_\l- onlaneleft_\l- onlaneright_\l- s_\l- n_\l|+ NavigationGoalObserver()\l+ update()\l+ isNextGoalPointFinal()\l+ isNextGoalPointInView()\l+ isNextGoalPointOnCurrent\lLane()\l+ isNextGoalPointOnLaneToThe\lLeft()\l+ isNextGoalPointOnLaneToThe\lRight()\l+ getProgress()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1NavigationGoalObserver.html",tooltip=" "];
  Node68 -> Node67 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node68 [label="{adore::view::ANavigation\lGoalView\n||+ isNextGoalPointFinal()\l+ isNextGoalPointInView()\l+ isNextGoalPointOnCurrent\lLane()\l+ isNextGoalPointOnLaneToThe\lLeft()\l+ isNextGoalPointOnLaneToThe\lRight()\l+ getProgress()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1view_1_1ANavigationGoalView.html",tooltip=" "];
  Node66 -> Node67 [color="grey25",fontsize="10",style="solid",label=" -goalReader_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node44 -> Node67 [color="grey25",fontsize="10",style="solid",label=" -lcl_\n-lcr_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node69 -> Node67 [color="grey25",fontsize="10",style="solid",label=" -goal_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node69 [label="{adore::fun::NavigationGoal\n||}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$structadore_1_1fun_1_1NavigationGoal.html",tooltip=" "];
  Node23 -> Node67 [color="grey25",fontsize="10",style="solid",label=" -lfv_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node71 -> Node67 [color="grey25",fontsize="10",style="solid",label=" -p_nav_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node71 [label="{adore::params::APNavigation\n||+ getActivePlottingLocal()\l+ getActivePlottingGlobal()\l+ getLaneChangePenalty()\l+ useScenarioManagerMap()\l+ getNagivationGoalStopTolerance\lLateral()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APNavigation.html",tooltip="abstract class containing parameters which configure navigation behaviour"];
  Node72 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -coercion_detection_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node72 [label="{adore::fun::SPRNonCoercive\n||+ SPRNonCoercive()\l+ isValid()\l+ getName()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1SPRNonCoercive.html",tooltip=" "];
  Node56 -> Node72 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node57 -> Node72 [color="grey25",fontsize="10",style="solid",label=" -ppred_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 -> Node72 [color="grey25",fontsize="10",style="solid",label=" -pvehicle_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node48 -> Node72 [color="grey25",fontsize="10",style="solid",label=" -ptac_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 -> Node72 [color="grey25",fontsize="10",style="solid",label=" -predictionView_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node73 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -checkPointSet_\n-connectionSet_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node73 [label="{adore::env::ControlledConnection\lSet4Ego\n||+ ControlledConnectionSet4\lEgo()\l+ update()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1ControlledConnectionSet4Ego.html",tooltip="Specialization of ControlledConnectionSet: Filters connections in range of ego."];
  Node61 -> Node73 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node66 -> Node73 [color="grey25",fontsize="10",style="solid",label=" -xreader_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node74 -> Node73 [color="grey25",fontsize="10",style="solid",label=" -x_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node74 [label="{adore::env::VehicleMotion\lState9d\n|+ time_\l+ data_\l|+ getTime()\l+ getX()\l+ getY()\l+ getZ()\l+ getPSI()\l+ getvx()\l+ getvy()\l+ getOmega()\l+ getAx()\l+ getDelta()\land 10 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1VehicleMotionState9d.html",tooltip="This struct holds the motion state of the vehicle in 9d."];
  Node75 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -gap_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node75 [label="{adore::env::EmptyGap\n||+ getState()\l+ getLeadProgress()\l+ getChaseProgress()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1EmptyGap.html",tooltip="defines a gap for testing purposes, which never has lead or chase vehicles."];
  Node76 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -three_lanes_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node76 [label="{adore::env::ThreeLaneView\lDecoupled\n|- participantSet_\l- monitor_traffic_\l|+ ThreeLaneViewDecoupled()\l+ ~ThreeLaneViewDecoupled()\l+ update()\l+ getCurrentLane()\l+ getLeftLaneChange()\l+ getRightLaneChange()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1ThreeLaneViewDecoupled.html",tooltip=" "];
  Node66 -> Node76 [color="grey25",fontsize="10",style="solid",label=" -tpsetReader_" ,arrowhead="odiamond",fontname="Helvetica"];
}
