digraph "adore::fun::PlanningResult"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{adore::fun::PlanningResult\n|+ id\l+ iteration\l+ name\l+ nominal_maneuver_valid\l+ combined_maneuver_valid\l+ status_string\l+ objective_values\l+ performance_values\l+ maneuver_type\l+ indicator_left\l+ indicator_right\l+ COLLISION_MITIGATION\l+ EMERGENCY_BREAKING\l+ NOMINAL_DRIVING\l|+ PlanningResult()\l+ getObjectiveValue()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +combined_maneuver\l_swath\n+nominal_maneuver\l_swath" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{adore::mad::OccupancyCylinderTree\n||+ collidesWith()\l+ getPostEncroachmentTime()\l+ getEarliestCollisionTime()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1OccupancyCylinderTree.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{adore::mad::VectorBasedVolume\lTree\< OccupancyCylinder,\l OccupancyCylinderBoundingFunctor \>\n|- levels_\l- branching_factor_\l- levels_ok_\l|+ VectorBasedVolumeTree()\l+ getLevel()\l+ getLevel()\l+ getOccupancyCount()\l+ getOccupancyCount()\l+ setPreferredBranchingFactor()\l+ insert()\l+ getLevelCount()\l+ remove_all_levels()\l+ compute_all_levels()\l+ recompute_levels()\l+ setLevelCount()\l+ compute_min()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1VectorBasedVolumeTree.html",tooltip=" "];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -bound_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{adore::mad::OccupancyCylinder\lBoundingFunctor\n||+ operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1mad_1_1OccupancyCylinderBoundingFunctor.html",tooltip=" "];
  Node5 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +nominal_maneuver_lateral\l_lbx\n+nominal_maneuver\l_lateral_ubx\n+nominal_maneuver\l_longitudinal_lbx\n+nominal_maneuver_longitudinal_ubx" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{adore::mad::LLinearPiecewise\lFunctionM\< double, 3 \>\n|- m_data\l- m_searchIndex\l|+ getData()\l+ getData()\l+ findIndex()\l+ f()\l+ limitHi()\l+ limitLo()\l+ setLimits()\l+ create_derivative()\l+ bound()\l+ limit_s_to_bounds()\land 42 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1LLinearPiecewiseFunctionM.html",tooltip=" "];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{adore::mad::AScalarToN\l\< double, n \>\n||+ toArray()\l+ toArray()\l+ dimension()\l+ fi()\l+ multiply()\l+ add()\l+ operator*=()\l+ operator+=()\l+ operator-=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AScalarToN.html",tooltip=" "];
  Node7 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{adore::mad::ALFunction\l\< DT, CT \>\n|- cached_ymin\l- cached_ymax\l- cached_bounds_valid\l|+ setLimits()\l+ limitHi()\l+ limitLo()\l+ f()\l+ clone()\l+ create_derivative()\l+ bound()\l+ ~ALFunction()\l+ ALFunction()\l+ operator()()\l+ isInDomain()\l+ f_bounded()\l+ f()\l+ bound()\l+ invalidateCachedBounds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1ALFunction.html",tooltip=" "];
  Node8 -> Node5 [color="grey25",fontsize="10",style="solid",label=" -single_dimensions" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{adore::mad::LLinearPiecewise\lFunctionM\< T, n \>::OneDimension\n|- m_row\l|+ OneDimension()\l+ OneDimension()\l+ f()\l+ limitHi()\l+ limitLo()\l+ setLimits()\l+ clone()\l+ create_derivative()\l+ bound()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1LLinearPiecewiseFunctionM_1_1OneDimension.html",tooltip=" "];
  Node9 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{adore::mad::ALFunction\l\< DT, T \>\n|- cached_ymin\l- cached_ymax\l- cached_bounds_valid\l|+ setLimits()\l+ limitHi()\l+ limitLo()\l+ f()\l+ f()\l+ clone()\l+ create_derivative()\l+ bound()\l+ bound()\l+ ~ALFunction()\l+ ALFunction()\l+ operator()()\l+ isInDomain()\l+ f_bounded()\l+ invalidateCachedBounds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1ALFunction.html",tooltip=" "];
  Node10 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -m_parent" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{adore::mad::LLinearPiecewise\lFunctionM\< T, n \>\n|- m_data\l- m_searchIndex\l|+ getData()\l+ getData()\l+ findIndex()\l+ f()\l+ limitHi()\l+ limitLo()\l+ setLimits()\l+ create_derivative()\l+ bound()\l+ limit_s_to_bounds()\land 42 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1LLinearPiecewiseFunctionM.html",tooltip=" "];
  Node11 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node11 [label="{adore::mad::AScalarToN\l\< T, n \>\n||+ toArray()\l+ toArray()\l+ dimension()\l+ fi()\l+ multiply()\l+ add()\l+ operator*=()\l+ operator+=()\l+ operator-=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AScalarToN.html",tooltip=" "];
  Node12 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node12 [label="{adore::mad::ALFunction\l\< T, adoreMatrix\< T, N,\l 1 \> \>\n|- cached_ymin\l- cached_ymax\l- cached_bounds_valid\l|+ setLimits()\l+ limitHi()\l+ limitLo()\l+ f()\l+ f()\l+ clone()\l+ create_derivative()\l+ bound()\l+ bound()\l+ ~ALFunction()\l+ ALFunction()\l+ operator()()\l+ isInDomain()\l+ f_bounded()\l+ invalidateCachedBounds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1ALFunction.html",tooltip=" "];
  Node8 -> Node10 [color="grey25",fontsize="10",style="solid",label=" -single_dimensions" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +combined_maneuver\n+nominal_maneuver" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 [label="{adore::fun::SetPointRequest\n|+ setPoints\l+ setPointRequestID\l|+ SetPointRequest()\l+ ~SetPointRequest()\l+ push_back()\l+ append()\l+ setStartTime()\l+ getDuration()\l+ interpolateReference()\l+ interpolateSetPoint()\l+ relocate()\l+ relocateTo()\land 13 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1SetPointRequest.html",tooltip=" "];
  Node14 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +nominal_maneuver_lateral\l_plan\n+nominal_maneuver\l_longitudinal_plan" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 [label="{adore::mad::LLinearPiecewise\lFunctionM\< double, 4 \>\n|- m_data\l- m_searchIndex\l|+ getData()\l+ getData()\l+ findIndex()\l+ f()\l+ limitHi()\l+ limitLo()\l+ setLimits()\l+ create_derivative()\l+ bound()\l+ limit_s_to_bounds()\land 42 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1LLinearPiecewiseFunctionM.html",tooltip=" "];
  Node6 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 -> Node14 [color="grey25",fontsize="10",style="solid",label=" -single_dimensions" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +terminal_maneuver" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 [label="{adore::fun::TerminalRequest\n|- X\l- Y\l- psi\l- t\l- valid\l|+ set()\l+ getX()\l+ getY()\l+ getPSI()\l+ getT()\l+ isValid()\l+ isActive()\l+ getStateVector()\l+ relocate()\l+ setStartTime()\l+ TerminalRequest()\l+ TerminalRequest()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1TerminalRequest.html",tooltip=" "];
}
