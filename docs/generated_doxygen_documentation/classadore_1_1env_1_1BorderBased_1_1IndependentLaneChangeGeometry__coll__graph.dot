digraph "adore::env::BorderBased::IndependentLaneChangeGeometry"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{adore::env::BorderBased\l::IndependentLaneChangeGeometry\n|+ navigationCost_fcn\l_available_\l+ maximum_navcost_increase_\l- valid_\l- progressGateOpen_\l- progressGateClosed_\l|+ setSmoothness()\l+ setMaximumNavCostIncrease()\l+ setLookAhead()\l+ setLookBehind()\l+ isValid()\l+ getProgressGateOpen()\l+ getProgressGateClosed()\l+ isNavigationCostFcnAvailable()\l+ getLeftOffsetFct()\l+ getRightOffsetFct()\land 13 more...\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="A class for computation of the geometric information required to perform lane changes...."];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +navigationCost_fct\l_\n+offsetSeparatingBorders\l_\n+offsetSourceOuterBorders\l_\n+offsetTargetOuterBorders\l_\n+speedLimit_fct_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{adore::mad::LLinearPiecewise\lFunctionM\< T, n \>\n|- m_data\l- m_searchIndex\l|+ getData()\l+ getData()\l+ findIndex()\l+ f()\l+ limitHi()\l+ limitLo()\l+ setLimits()\l+ create_derivative()\l+ bound()\l+ limit_s_to_bounds()\land 42 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1LLinearPiecewiseFunctionM.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{adore::mad::AScalarToN\l\< T, n \>\n||+ toArray()\l+ toArray()\l+ dimension()\l+ fi()\l+ multiply()\l+ add()\l+ operator*=()\l+ operator+=()\l+ operator-=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AScalarToN.html",tooltip=" "];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{adore::mad::ALFunction\l\< T, adoreMatrix\< T, N,\l 1 \> \>\n|- cached_ymin\l- cached_ymax\l- cached_bounds_valid\l|+ setLimits()\l+ limitHi()\l+ limitLo()\l+ f()\l+ f()\l+ clone()\l+ create_derivative()\l+ bound()\l+ bound()\l+ ~ALFunction()\l+ ALFunction()\l+ operator()()\l+ isInDomain()\l+ f_bounded()\l+ invalidateCachedBounds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1ALFunction.html",tooltip=" "];
  Node5 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -single_dimensions" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{adore::mad::LLinearPiecewise\lFunctionM\< T, n \>::OneDimension\n|- m_row\l|+ OneDimension()\l+ OneDimension()\l+ f()\l+ limitHi()\l+ limitLo()\l+ setLimits()\l+ clone()\l+ create_derivative()\l+ bound()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1LLinearPiecewiseFunctionM_1_1OneDimension.html",tooltip=" "];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{adore::mad::ALFunction\l\< DT, T \>\n|- cached_ymin\l- cached_ymax\l- cached_bounds_valid\l|+ setLimits()\l+ limitHi()\l+ limitLo()\l+ f()\l+ f()\l+ clone()\l+ create_derivative()\l+ bound()\l+ bound()\l+ ~ALFunction()\l+ ALFunction()\l+ operator()()\l+ isInDomain()\l+ f_bounded()\l+ invalidateCachedBounds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1ALFunction.html",tooltip=" "];
  Node2 -> Node5 [color="grey25",fontsize="10",style="solid",label=" -m_parent" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -borderSet_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{adore::env::BorderBased\l::BorderSet\n|# m_coord_uncertainty_xy\l# m_coord_uncertainty_z\l# m_guard\l# m_max_lane_width\l# m_byID\l# m_byLeftID\l# m_byFirstCoord\l# m_byLastCoord\l# m_byRegion\l# m_isOwner\l- m_allowedBorderTypes\l|+ BorderSet()\l+ ~BorderSet()\l+ addAllowedType()\l+ rotate()\l+ translate()\l+ removeAllowedType()\l+ borderTypeValid()\l+ setIsOwner()\l+ insert_border()\l+ erase_border()\land 46 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1BorderSet.html",tooltip="efficiently store borders in boost R-tree"];
  Node8 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -borderCostMap_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{adore::env::BorderBased\l::BorderCostMap\n||+ getRandomBorderIDCostPair()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1BorderCostMap.html",tooltip=" "];
  Node9 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{std::unordered_map\l\< BorderID, adore::env\l::NavigationCost, adore\l::env::BorderBased::BorderIDHasher \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node10 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +lcb_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{adore::env::BorderBased\l::LaneChangeBorders\n|+ gate_target_borders_\l+ gate_source_borders_\l+ downstream_borders_\l+ upstream_borders_\l- lc_direction_left_\l- lookahead_\l- lookbehind_\l- progress_in_gate_\l- remaining_in_gate_\l- downstream_length_\l- distance_to_current_\l- valid_\l- continueOnIncreasingCost_\l|+ LaneChangeBorders()\l+ isLCDirectionLeft()\l+ isValid()\l+ getProgressInGate()\l+ getRemainingInGate()\l+ getDownstreamLength()\l+ getDistanceToCurrent()\l+ getLookAhead()\l+ setLookAhead()\l+ getLookBehind()\land 6 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1LaneChangeBorders.html",tooltip="Selects Borders from BorderSet required for LaneChangeView construction."];
  Node7 -> Node10 [color="grey25",fontsize="10",style="solid",label=" -borderSet_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 -> Node10 [color="grey25",fontsize="10",style="solid",label=" -borderCostMap_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +baseline_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{adore::env::BorderBased\l::Baseline\n|+ breaks_s_\l+ breaks_x_\l+ breaks_y_\l+ breaks_z_\l+ samples_s_\l+ samples_x_\l+ samples_dx_\l+ samples_ddx_\l+ samples_dddx_\l+ samples_y_\land 12 more...\l- nFitPoints_\l- nSamplesPoints_\l- fit_smoothness_\l- lookbehind_\l- lookahead_\l- min_length_\l- valid_\l|+ Baseline()\l+ resize()\l+ setSmoothness()\l+ isValid()\l+ getLookAhead()\l+ getLookBehind()\l+ setLookAhead()\l+ setLookBehind()\l+ getNSamplePoints()\l+ getNFitPoints()\l+ update()\l+ computeDerivatives()\l+ defineOffset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1Baseline.html",tooltip="A local, non-linear, smooth road coordinate system generated from a sequence of borders."];
  Node2 -> Node11 [color="grey25",fontsize="10",style="solid",label=" +curvatureDerivative\l_fct_\n+curvature_fct_\n+normal_fct_\n+position_fct_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +navigationCostBorders\l_\n+separatingBorders\l_\n+sourceOuterBorders\l_\n+targetOuterBorders_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{adore::env::BorderBased\l::BorderSequence\n||+ getLength()\l+ sample()\l+ beginLines()\l+ endLines()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1BorderSequence.html",tooltip="A class which augments a vector of Border* with some sampling features."];
  Node13 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node13 [label="{std::vector\< Border * \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
}
