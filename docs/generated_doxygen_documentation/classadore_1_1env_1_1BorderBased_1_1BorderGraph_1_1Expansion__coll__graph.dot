digraph "adore::env::BorderBased::BorderGraph::Expansion"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{adore::env::BorderBased\l::BorderGraph::Expansion\n|- m_connectedBorders\l- m_search_forward\l|+ Expansion()\l+ hasMore()\l+ getNext()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_n" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{adore::env::BorderBased\l::Node\n|+ m_g\l+ m_h\l|+ Node()\l+ Node()\l+ Node()\l+ setBorder()\l+ setG()\l+ setH()\l+ setSuccessor()\l+ setPredecessor()\l+ g()\l+ h()\l+ f()\l+ operator\<()\l+ operator\>()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1BorderBased_1_1Node.html",tooltip=" "];
  Node2 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +m_predecessor\n+m_successor" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +m_border" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{adore::env::BorderBased\l::Border\n|+ m_type\l|+ Border()\l+ ~Border()\l+ operator=()\l+ Border()\l+ Border()\l+ Border()\l+ Border()\l+ Border()\l+ Border()\l+ Border()\land 30 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1BorderBased_1_1Border.html",tooltip="The border struct contains data of the smallest."];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +m_path" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{adore::mad::LLinearPiecewise\lFunctionM\< T, n \>\n|- m_data\l- m_searchIndex\l|+ getData()\l+ getData()\l+ findIndex()\l+ f()\l+ limitHi()\l+ limitLo()\l+ setLimits()\l+ create_derivative()\l+ bound()\l+ limit_s_to_bounds()\land 42 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1LLinearPiecewiseFunctionM.html",tooltip=" "];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{adore::mad::AScalarToN\l\< T, n \>\n||+ toArray()\l+ toArray()\l+ dimension()\l+ fi()\l+ multiply()\l+ add()\l+ operator*=()\l+ operator+=()\l+ operator-=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AScalarToN.html",tooltip=" "];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{adore::mad::ALFunction\l\< T, adoreMatrix\< T, N,\l 1 \> \>\n|- cached_ymin\l- cached_ymax\l- cached_bounds_valid\l|+ setLimits()\l+ limitHi()\l+ limitLo()\l+ f()\l+ f()\l+ clone()\l+ create_derivative()\l+ bound()\l+ bound()\l+ ~ALFunction()\l+ ALFunction()\l+ operator()()\l+ isInDomain()\l+ f_bounded()\l+ invalidateCachedBounds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1ALFunction.html",tooltip=" "];
  Node7 -> Node4 [color="grey25",fontsize="10",style="solid",label=" -single_dimensions" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{adore::mad::LLinearPiecewise\lFunctionM\< T, n \>::OneDimension\n|- m_row\l|+ OneDimension()\l+ OneDimension()\l+ f()\l+ limitHi()\l+ limitLo()\l+ setLimits()\l+ clone()\l+ create_derivative()\l+ bound()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1LLinearPiecewiseFunctionM_1_1OneDimension.html",tooltip=" "];
  Node8 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{adore::mad::ALFunction\l\< DT, T \>\n|- cached_ymin\l- cached_ymax\l- cached_bounds_valid\l|+ setLimits()\l+ limitHi()\l+ limitLo()\l+ f()\l+ f()\l+ clone()\l+ create_derivative()\l+ bound()\l+ bound()\l+ ~ALFunction()\l+ ALFunction()\l+ operator()()\l+ isInDomain()\l+ f_bounded()\l+ invalidateCachedBounds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1ALFunction.html",tooltip=" "];
  Node4 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -m_parent" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +m_id\n+m_left" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{adore::env::BorderBased\l::BorderID\n||+ BorderID()\l+ BorderID()\l+ translate()\l+ distance()\l+ distance()\l+ getLength()\l+ rotate()\l+ operator==()\l+ inverse()\l+ operator\<()\l+ toString()\l+ isInArea()\l+ getReverseDirectionID()\l+ getReverseDirectionID()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1BorderBased_1_1BorderID.html",tooltip="This struct identifies a Border by the coordinates of the starting and the end point."];
  Node10 -> Node9 [color="grey25",fontsize="10",style="solid",label=" +m_first\n+m_last" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{adore::env::BorderBased\l::Coordinate\n|+ m_X\l+ m_Y\l+ m_Z\l|+ Coordinate()\l+ Coordinate()\l+ Coordinate()\l+ Coordinate()\l+ translate()\l+ rotate()\l+ discretize()\l+ distance()\l+ isNear()\l+ operator==()\land 8 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1BorderBased_1_1Coordinate.html",tooltip="This struct represents 3-dimensional coordines."];
  Node11 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_it" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{adore::env::BorderBased\l::itpair\< Coordinate2Borders\lRT::const_query_iterator,\l Coordinate2BordersRT::const\l_query_iterator \>\n|+ first\l+ second\l|+ itpair()\l+ current()\l+ end()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1BorderBased_1_1itpair.html",tooltip=" "];
  Node12 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_cost" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{adore::env::BorderBased\l::ABorderGraphCost\n||+ ~ABorderGraphCost()\l+ assign()\l+ getCostGuard()\l+ isCostBounded()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1ABorderGraphCost.html",tooltip=" "];
}
