digraph "adore::apps::TacticalPlanner"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{adore::apps::TacticalPlanner\n|- iteration_\l- iteration_time_length_\l- last_time_\l- cost_bound_\l- cost_bound_guard_\l- lanechange_supression\l_timeout_\l- force_langechange_left\l_timeout_\l- force_langechange_right\l_timeout_\l- force_slow_maneuver\l_timeout_\l- cost_bound_name_\l|+ getEvaluator()\l+ TacticalPlanner()\l+ ~TacticalPlanner()\l+ run()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Decision making and maneuver planning."];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -pTrajectoryGeneration_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{adore::params::APTrajectory\lGeneration\n||+ get_rho()\l+ getZDIntegrationLength()\l+ getZDIntegrationStep()\l+ getSetPointCount()\l+ getEmergencyManeuverDelay()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APTrajectoryGeneration.html",tooltip="abstract class containing parameters to configure the behaviour of trajectory generation"];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -force_langechange\l_left_reader_\n-force_langechange\l_right_reader_\n-force_slow_maneuvers\l_reader_\n-langechange_suppression\l_reader_\n-navigation_goal_reader\l_\n-vehicle_state_reader_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{adore::mad::AReader\< T \>\n||+ hasData()\l+ hasUpdate()\l+ getData()\l+ getDesc()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AReader.html",tooltip=" "];
  Node4 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -best_planning_result_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{adore::fun::PlanningResult\n|+ id\l+ iteration\l+ name\l+ nominal_maneuver_valid\l+ combined_maneuver_valid\l+ status_string\l+ objective_values\l+ performance_values\l+ maneuver_type\l+ indicator_left\l+ indicator_right\l+ COLLISION_MITIGATION\l+ EMERGENCY_BREAKING\l+ NOMINAL_DRIVING\l|+ PlanningResult()\l+ getObjectiveValue()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1fun_1_1PlanningResult.html",tooltip=" "];
  Node5 -> Node4 [color="grey25",fontsize="10",style="solid",label=" +combined_maneuver\l_swath\n+nominal_maneuver\l_swath" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{adore::mad::OccupancyCylinderTree\n||+ collidesWith()\l+ getPostEncroachmentTime()\l+ getEarliestCollisionTime()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1OccupancyCylinderTree.html",tooltip=" "];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{adore::mad::VectorBasedVolume\lTree\< OccupancyCylinder,\l OccupancyCylinderBoundingFunctor \>\n|- levels_\l- branching_factor_\l- levels_ok_\l|+ VectorBasedVolumeTree()\l+ getLevel()\l+ getLevel()\l+ getOccupancyCount()\l+ getOccupancyCount()\l+ setPreferredBranchingFactor()\l+ insert()\l+ getLevelCount()\l+ remove_all_levels()\l+ compute_all_levels()\l+ recompute_levels()\l+ setLevelCount()\l+ compute_min()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1VectorBasedVolumeTree.html",tooltip=" "];
  Node7 -> Node6 [color="grey25",fontsize="10",style="solid",label=" -bound_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{adore::mad::OccupancyCylinder\lBoundingFunctor\n||+ operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1mad_1_1OccupancyCylinderBoundingFunctor.html",tooltip=" "];
  Node8 -> Node4 [color="grey25",fontsize="10",style="solid",label=" +nominal_maneuver_lateral\l_lbx\n+nominal_maneuver\l_lateral_ubx\n+nominal_maneuver\l_longitudinal_lbx\n+nominal_maneuver_longitudinal_ubx" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{adore::mad::LLinearPiecewise\lFunctionM\< double, 3 \>\n|- m_data\l- m_searchIndex\l|+ getData()\l+ getData()\l+ findIndex()\l+ f()\l+ limitHi()\l+ limitLo()\l+ setLimits()\l+ create_derivative()\l+ bound()\l+ limit_s_to_bounds()\land 42 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1LLinearPiecewiseFunctionM.html",tooltip=" "];
  Node9 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{adore::mad::AScalarToN\l\< double, n \>\n||+ toArray()\l+ toArray()\l+ dimension()\l+ fi()\l+ multiply()\l+ add()\l+ operator*=()\l+ operator+=()\l+ operator-=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AScalarToN.html",tooltip=" "];
  Node10 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 [label="{adore::mad::ALFunction\l\< DT, CT \>\n|- cached_ymin\l- cached_ymax\l- cached_bounds_valid\l|+ setLimits()\l+ limitHi()\l+ limitLo()\l+ f()\l+ clone()\l+ create_derivative()\l+ bound()\l+ ~ALFunction()\l+ ALFunction()\l+ operator()()\l+ isInDomain()\l+ f_bounded()\l+ f()\l+ bound()\l+ invalidateCachedBounds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1ALFunction.html",tooltip=" "];
  Node11 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -single_dimensions" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{adore::mad::LLinearPiecewise\lFunctionM\< T, n \>::OneDimension\n|- m_row\l|+ OneDimension()\l+ OneDimension()\l+ f()\l+ limitHi()\l+ limitLo()\l+ setLimits()\l+ clone()\l+ create_derivative()\l+ bound()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1LLinearPiecewiseFunctionM_1_1OneDimension.html",tooltip=" "];
  Node12 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node12 [label="{adore::mad::ALFunction\l\< DT, T \>\n|- cached_ymin\l- cached_ymax\l- cached_bounds_valid\l|+ setLimits()\l+ limitHi()\l+ limitLo()\l+ f()\l+ f()\l+ clone()\l+ create_derivative()\l+ bound()\l+ bound()\l+ ~ALFunction()\l+ ALFunction()\l+ operator()()\l+ isInDomain()\l+ f_bounded()\l+ invalidateCachedBounds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1ALFunction.html",tooltip=" "];
  Node13 -> Node11 [color="grey25",fontsize="10",style="solid",label=" -m_parent" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 [label="{adore::mad::LLinearPiecewise\lFunctionM\< T, n \>\n|- m_data\l- m_searchIndex\l|+ getData()\l+ getData()\l+ findIndex()\l+ f()\l+ limitHi()\l+ limitLo()\l+ setLimits()\l+ create_derivative()\l+ bound()\l+ limit_s_to_bounds()\land 42 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1LLinearPiecewiseFunctionM.html",tooltip=" "];
  Node14 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node14 [label="{adore::mad::AScalarToN\l\< T, n \>\n||+ toArray()\l+ toArray()\l+ dimension()\l+ fi()\l+ multiply()\l+ add()\l+ operator*=()\l+ operator+=()\l+ operator-=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AScalarToN.html",tooltip=" "];
  Node15 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node15 [label="{adore::mad::ALFunction\l\< T, adoreMatrix\< T, N,\l 1 \> \>\n|- cached_ymin\l- cached_ymax\l- cached_bounds_valid\l|+ setLimits()\l+ limitHi()\l+ limitLo()\l+ f()\l+ f()\l+ clone()\l+ create_derivative()\l+ bound()\l+ bound()\l+ ~ALFunction()\l+ ALFunction()\l+ operator()()\l+ isInDomain()\l+ f_bounded()\l+ invalidateCachedBounds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1ALFunction.html",tooltip=" "];
  Node11 -> Node13 [color="grey25",fontsize="10",style="solid",label=" -single_dimensions" ,arrowhead="odiamond",fontname="Helvetica"];
  Node16 -> Node4 [color="grey25",fontsize="10",style="solid",label=" +combined_maneuver\n+nominal_maneuver" ,arrowhead="odiamond",fontname="Helvetica"];
  Node16 [label="{adore::fun::SetPointRequest\n|+ setPoints\l+ setPointRequestID\l|+ SetPointRequest()\l+ ~SetPointRequest()\l+ push_back()\l+ append()\l+ setStartTime()\l+ getDuration()\l+ interpolateReference()\l+ interpolateSetPoint()\l+ relocate()\l+ relocateTo()\land 13 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1SetPointRequest.html",tooltip=" "];
  Node17 -> Node4 [color="grey25",fontsize="10",style="solid",label=" +nominal_maneuver_lateral\l_plan\n+nominal_maneuver\l_longitudinal_plan" ,arrowhead="odiamond",fontname="Helvetica"];
  Node17 [label="{adore::mad::LLinearPiecewise\lFunctionM\< double, 4 \>\n|- m_data\l- m_searchIndex\l|+ getData()\l+ getData()\l+ findIndex()\l+ f()\l+ limitHi()\l+ limitLo()\l+ setLimits()\l+ create_derivative()\l+ bound()\l+ limit_s_to_bounds()\land 42 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1LLinearPiecewiseFunctionM.html",tooltip=" "];
  Node9 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node11 -> Node17 [color="grey25",fontsize="10",style="solid",label=" -single_dimensions" ,arrowhead="odiamond",fontname="Helvetica"];
  Node18 -> Node4 [color="grey25",fontsize="10",style="solid",label=" +terminal_maneuver" ,arrowhead="odiamond",fontname="Helvetica"];
  Node18 [label="{adore::fun::TerminalRequest\n|- X\l- Y\l- psi\l- t\l- valid\l|+ set()\l+ getX()\l+ getY()\l+ getPSI()\l+ getT()\l+ isValid()\l+ isActive()\l+ getStateVector()\l+ relocate()\l+ setStartTime()\l+ TerminalRequest()\l+ TerminalRequest()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1TerminalRequest.html",tooltip=" "];
  Node19 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -evaluator_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node19 [label="{adore::fun::EvaluatorWeightedSum\n|- objectives_\l- cost_list_\l- max_cost_\l- turnstate_\l|+ EvaluatorWeightedSum()\l+ setTurnState()\l+ addParameterPair()\l+ init()\l+ getCost()\l+ getIndex()\l+ evaluateToBest()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1EvaluatorWeightedSum.html",tooltip=" "];
  Node20 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node20 [label="{adore::fun::ATrajectoryEvaluator\n||+ evaluateToVector()\l+ evaluateToVector()\l+ evaluateToBest()\l+ evaluateToBest()\l+ ATrajectoryEvaluator()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1ATrajectoryEvaluator.html",tooltip=" "];
  Node21 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -indicator_dispatcher_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node21 [label="{adore::fun::IndicatorDispatcher\n||+ IndicatorDispatcher()\l+ ~IndicatorDispatcher()\l+ setIndicators()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1IndicatorDispatcher.html",tooltip="Dispatches indicator command for maneuver, which is currently executed."];
  Node3 -> Node21 [color="grey25",fontsize="10",style="solid",label=" -xreader_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node22 -> Node21 [color="grey25",fontsize="10",style="solid",label=" -icw_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node22 [label="{adore::mad::AWriter\< T \>\n||+ canWriteMore()\l+ write()\l+ getDesc()\l+ getNumberOfSubscribers()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AWriter.html",tooltip=" "];
  Node23 -> Node21 [color="grey25",fontsize="10",style="solid",label=" -activation_observer_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node23 [label="{adore::fun::ActivationState\lObserver\n||+ ActivationStateObserver()\l+ ~ActivationStateObserver()\l+ isAutomaticControlEnabled()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1ActivationStateObserver.html",tooltip=" "];
  Node3 -> Node23 [color="grey25",fontsize="10",style="solid",label=" -vehicle_extended_state\l_reader_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node24 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -result_reader_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node24 [label="{adore::mad::AFeed\< T \>\n||+ hasNext()\l+ getNext()\l+ getLatest()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AFeed.html",tooltip=" "];
  Node22 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -lane_view_reset_writer\l_\n-proposition_writer\l_\n-request_writer\l_\n-select_writer_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node25 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -pTacticalPlanner_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node25 [label="{adore::params::APTactical\lPlanner\n||+ getGlobalSpeedLimit()\l+ getResetRadius()\l+ getAccLatUB()\l+ getAccLatUB_minVelocity()\l+ getAccLonUB()\l+ getAccLonLB()\l+ getFrontTimeGap()\l+ getRearTimeGap()\l+ getFrontSGap()\l+ getLowerBoundFrontSGapForLF()\land 20 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APTacticalPlanner.html",tooltip="abstract classs containing parameters to configure aspects and constraints of the tactical planner"];
  Node26 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -pNavigation_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node26 [label="{adore::params::APNavigation\n||+ getActivePlottingLocal()\l+ getActivePlottingGlobal()\l+ getLaneChangePenalty()\l+ useScenarioManagerMap()\l+ getNagivationGoalStopTolerance\lLateral()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APNavigation.html",tooltip="abstract class containing parameters which configure navigation behaviour"];
  Node27 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -turn_signal_observer_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node27 [label="{adore::fun::TurnSignalObserver\n|- right_indicator_\l- left_indicator_\l- last_change_left_indicator_\l- last_change_right_indicator_\l- turned_on_manually\l_left_\l- turned_on_manually\l_right_\l- right_state_provided_\l- left_state_provided_\l- turned_on_automatically\l_left_\l- turned_on_automatically\l_right_\l- max_powerup_delay_\l- t0_\l|+ TurnSignalObserver()\l+ ~TurnSignalObserver()\l+ update()\l+ rightIndicatorTurnedOnWithin\lLastSecond()\l+ rightIndicatorTurnedOnManually\lWithinLastSecond()\l+ leftIndicatorTurnedOnManually\lWithinLastSecond()\l+ leftIndicatorTurnedOnWithin\lLastSecond()\l+ bothIndicatorsOn()\l+ newRightIndicatorOnEvent()\l+ newLeftIndicatorOnEvent()\l+ newManualLeftIndicatorOn\lEvent()\l+ newManualRightIndicatorOn\lEvent()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1TurnSignalObserver.html",tooltip=" "];
  Node3 -> Node27 [color="grey25",fontsize="10",style="solid",label=" -extended_state_reader\l_\n-indicator_command\l_reader_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node28 -> Node27 [color="grey25",fontsize="10",style="solid",label=" -extended_state_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node28 [label="{adore::fun::VehicleExtended\lState\n|- gearState_\l- indicatorLeftOn_\l- indicatorRightOn_\l- automaticControlAccelerationOn_\l- automaticControlAcceleration\lActive_\l- automaticControlSteeringOn_\l- checkpointClearance_\l|+ VehicleExtendedState()\l+ getGearState()\l+ setGearState()\l+ getIndicatorLeftOn()\l+ setIndicatorLeftOn()\l+ getIndicatorRightOn()\l+ setIndicatorRightOn()\l+ getAutomaticControlAccelerationOn()\l+ setAutomaticControlAccelerationOn()\l+ getAutomaticControlAcceleration\lActive()\land 6 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1VehicleExtendedState.html",tooltip=" "];
  Node29 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -spr_dispatcher_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node29 [label="{adore::fun::SetPointRequest\lDispatcher\n|- reset_\l- has_vehicle_state_\l- status_msg_\l|+ SetPointRequestDispatcher()\l+ ~SetPointRequestDispatcher()\l+ getInitialState()\l+ dispatch()\l+ getStatus()\l- computeResetCondition()\l- computePlanStartPoint()\l- update()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1SetPointRequestDispatcher.html",tooltip="class helps to dispatch SetPointRequest to controller SetPointRequestDispatcher handles selection of ..."];
  Node3 -> Node29 [color="grey25",fontsize="10",style="solid",label=" -localization_state\l_reader_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node30 -> Node29 [color="grey25",fontsize="10",style="solid",label=" -x0_localization_\n-x0_odometry_\n-x_localization_\n-x_odometry_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node30 [label="{adore::env::VehicleMotion\lState9d\n|+ time_\l+ data_\l|+ getTime()\l+ getX()\l+ getY()\l+ getZ()\l+ getPSI()\l+ getvx()\l+ getvy()\l+ getOmega()\l+ getAx()\l+ getDelta()\land 10 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1VehicleMotionState9d.html",tooltip="This struct holds the motion state of the vehicle in 9d."];
  Node31 -> Node29 [color="grey25",fontsize="10",style="solid",label=" -localization_buffer\l_\n-odometry_buffer_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node31 [label="{adore::fun::VehicleMotion\lStateBuffer\n|- buffer_\l- dt_max_\l|+ VehicleMotionStateBuffer()\l+ ~VehicleMotionStateBuffer()\l+ update()\l+ size()\l+ getTmax()\l+ interpolate_or_latest()\l+ interpolate()\l- interp()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1VehicleMotionStateBuffer.html",tooltip="Buffers and interpolates vehicle positions."];
  Node24 -> Node31 [color="grey25",fontsize="10",style="solid",label=" -feed_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node32 -> Node29 [color="grey25",fontsize="10",style="solid",label=" -pveh_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node32 [label="{adore::params::APVehicle\n||+ get_vehicle_id()\l+ get_a()\l+ get_b()\l+ get_c()\l+ get_d()\l+ get_m()\l+ get_mu()\l+ get_g()\l+ get_h()\l+ get_cf()\land 17 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APVehicle.html",tooltip="abstract class for vehicle configuration related paremeters"];
  Node22 -> Node29 [color="grey25",fontsize="10",style="solid",label=" -nominal_trajectory\l_writer_\n-setpointrequest\l_localization_writer\l_\n-setpointrequest\l_odometry_writer_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node25 -> Node29 [color="grey25",fontsize="10",style="solid",label=" -ptac_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node16 -> Node29 [color="grey25",fontsize="10",style="solid",label=" -spr_localization_\n-spr_odom_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node23 -> Node29 [color="grey25",fontsize="10",style="solid",label=" -activation_observer_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node33 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -user_input_observer_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node33 [label="{adore::fun::UserInputObserver\n||+ update()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1UserInputObserver.html",tooltip=" "];
}
