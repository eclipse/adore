digraph "adore::fun::CancelLCMRMPlanner&lt; K, P &gt;"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{adore::fun::CancelLCMRMPlanner\l\< K, P \>\n||+ CancelLCMRMPlanner()\l+ addConstraint()\l+ addReference()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Plans minimum risk maneuver to cancel lane change."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{adore::fun::MRMPlanner\l\< K, P \>\n|+ N\l+ R\l- lateralPlanner_\l- jmax_\l- tstall_\l- astall_\l- amin_\l- second_attempt_\l- longitudinal_plan_valid_\l|+ setJMax()\l+ setTStall()\l+ setAStall()\l+ setAMin()\l+ setSecondAttempt()\l+ MRMPlanner()\l+ getInformationSet()\l+ amin_medium_brake_trapezoidal()\l+ t_short_brake_trapezoidal()\l+ t_medium_brake_trapezoidal()\land 12 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1MRMPlanner.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{adore::fun::ANominalPlanner\n||+ compute()\l+ hasValidPlan()\l+ getSetPointRequest()\l+ getCPUTime()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1ANominalPlanner.html",tooltip=" "];
  Node4 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -aptraj_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{adore::params::APTrajectory\lGeneration\n||+ get_rho()\l+ getZDIntegrationLength()\l+ getZDIntegrationStep()\l+ getSetPointCount()\l+ getEmergencyManeuverDelay()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APTrajectoryGeneration.html",tooltip="abstract class containing parameters to configure the behaviour of trajectory generation"];
  Node5 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -postproc_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{adore::fun::InformationSet\lPostProcessing\< 4, 2 \>\n|- info_\l|+ getInformationSet()\l+ isLongitudinalPlanValid()\l+ isLateralPlanValid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1InformationSetPostProcessing.html",tooltip=" "];
  Node6 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -apvehicle_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{adore::params::APVehicle\n||+ get_vehicle_id()\l+ get_a()\l+ get_b()\l+ get_c()\l+ get_d()\l+ get_m()\l+ get_mu()\l+ get_g()\l+ get_h()\l+ get_cf()\land 17 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APVehicle.html",tooltip="abstract class for vehicle configuration related paremeters"];
  Node7 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -roadCoordinates_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{adore::fun::RoadCoordinate\lConverter\n|- dx_\l- a_\l- b_\l- L_\l- h_\l- g_\l- mu_\l- cf_\l- cr_\l- Iz_m_\l- rho_\l|+ RoadCoordinateConverter()\l+ isValid()\l+ updateParameters()\l+ toRoadCoordinates()\l+ toVehicleState()\l+ toVehicleStateTrajectory()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1RoadCoordinateConverter.html",tooltip=" "];
  Node8 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -model_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{adore::fun::VLB_OpenLoop\n|- lambda_\l- a_\l- b_\l- L_\l- h_\l- g_\l- mu_\l- cf_\l- cr_\l- Iz_m_\l- delta_max_\l- delta_min_\l- gearState_\l|+ VLB_OpenLoop()\l+ updateParameters()\l+ setReference()\l+ setGearState()\l+ f()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1VLB__OpenLoop.html",tooltip=" "];
  Node9 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{adore::mad::AOdeModel\l\< double \>\n||+ AOdeModel()\l+ ~AOdeModel()\l+ f()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AOdeModel.html",tooltip=" "];
  Node10 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -lfg_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{adore::view::ALane\n||+ isValid()\l+ getSMax()\l+ getSMin()\l+ inSRange()\l+ getProgressOfWidthOpen()\l+ getProgressOfWidthClosed()\l+ getOnLaneTraffic()\l+ getConflictSet()\l+ getSpeedLimit()\l+ getLeftIndicatorHint()\land 11 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1view_1_1ALane.html",tooltip=" "];
  Node11 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -longitudinal_plan_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{adore::mad::LLinearPiecewise\lFunctionM\< double, N+R \>\n|- m_data\l- m_searchIndex\l|+ getData()\l+ getData()\l+ findIndex()\l+ f()\l+ limitHi()\l+ limitLo()\l+ setLimits()\l+ create_derivative()\l+ bound()\l+ limit_s_to_bounds()\land 42 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1LLinearPiecewiseFunctionM.html",tooltip=" "];
  Node12 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node12 [label="{adore::mad::AScalarToN\l\< double, n \>\n||+ toArray()\l+ toArray()\l+ dimension()\l+ fi()\l+ multiply()\l+ add()\l+ operator*=()\l+ operator+=()\l+ operator-=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AScalarToN.html",tooltip=" "];
  Node13 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node13 [label="{adore::mad::ALFunction\l\< DT, CT \>\n|- cached_ymin\l- cached_ymax\l- cached_bounds_valid\l|+ setLimits()\l+ limitHi()\l+ limitLo()\l+ f()\l+ clone()\l+ create_derivative()\l+ bound()\l+ ~ALFunction()\l+ ALFunction()\l+ operator()()\l+ isInDomain()\l+ f_bounded()\l+ f()\l+ bound()\l+ invalidateCachedBounds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1ALFunction.html",tooltip=" "];
  Node14 -> Node11 [color="grey25",fontsize="10",style="solid",label=" -single_dimensions" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 [label="{adore::mad::LLinearPiecewise\lFunctionM\< T, n \>::OneDimension\n|- m_row\l|+ OneDimension()\l+ OneDimension()\l+ f()\l+ limitHi()\l+ limitLo()\l+ setLimits()\l+ clone()\l+ create_derivative()\l+ bound()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1LLinearPiecewiseFunctionM_1_1OneDimension.html",tooltip=" "];
  Node15 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node15 [label="{adore::mad::ALFunction\l\< DT, T \>\n|- cached_ymin\l- cached_ymax\l- cached_bounds_valid\l|+ setLimits()\l+ limitHi()\l+ limitLo()\l+ f()\l+ f()\l+ clone()\l+ create_derivative()\l+ bound()\l+ bound()\l+ ~ALFunction()\l+ ALFunction()\l+ operator()()\l+ isInDomain()\l+ f_bounded()\l+ invalidateCachedBounds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1ALFunction.html",tooltip=" "];
  Node16 -> Node14 [color="grey25",fontsize="10",style="solid",label=" -m_parent" ,arrowhead="odiamond",fontname="Helvetica"];
  Node16 [label="{adore::mad::LLinearPiecewise\lFunctionM\< T, n \>\n|- m_data\l- m_searchIndex\l|+ getData()\l+ getData()\l+ findIndex()\l+ f()\l+ limitHi()\l+ limitLo()\l+ setLimits()\l+ create_derivative()\l+ bound()\l+ limit_s_to_bounds()\land 42 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1LLinearPiecewiseFunctionM.html",tooltip=" "];
  Node17 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node17 [label="{adore::mad::AScalarToN\l\< T, n \>\n||+ toArray()\l+ toArray()\l+ dimension()\l+ fi()\l+ multiply()\l+ add()\l+ operator*=()\l+ operator+=()\l+ operator-=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AScalarToN.html",tooltip=" "];
  Node18 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node18 [label="{adore::mad::ALFunction\l\< T, adoreMatrix\< T, N,\l 1 \> \>\n|- cached_ymin\l- cached_ymax\l- cached_bounds_valid\l|+ setLimits()\l+ limitHi()\l+ limitLo()\l+ f()\l+ f()\l+ clone()\l+ create_derivative()\l+ bound()\l+ bound()\l+ ~ALFunction()\l+ ALFunction()\l+ operator()()\l+ isInDomain()\l+ f_bounded()\l+ invalidateCachedBounds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1ALFunction.html",tooltip=" "];
  Node14 -> Node16 [color="grey25",fontsize="10",style="solid",label=" -single_dimensions" ,arrowhead="odiamond",fontname="Helvetica"];
  Node19 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -headingConstraintLB\l_\n-headingConstraintUB_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node19 [label="{adore::fun::HeadingConstraint\n|- heading_ub_\l- heading_lb_\l- d_\l|+ HeadingConstraint()\l+ getValue()\l+ update()\l+ getDirection()\l+ getDimension()\l+ getDerivative()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1HeadingConstraint.html",tooltip=" "];
  Node20 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node20 [label="{adore::fun::ANominalConstraint\n||+ getValue()\l+ update()\l+ getDirection()\l+ getDimension()\l+ getDerivative()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1ANominalConstraint.html",tooltip=" "];
  Node21 -> Node19 [color="grey25",fontsize="10",style="solid",label=" -p_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node21 [label="{adore::params::APLateral\lPlanner\n||+ getWeightPos()\l+ getWeightVel()\l+ getWeightAcc()\l+ getWeightJerk()\l+ getWeightEndPos()\l+ getWeightEndVel()\l+ getWeightEndAcc()\l+ getSlackPos()\l+ getSlackVel()\l+ getSlackAcc()\land 14 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APLateralPlanner.html",tooltip="abstract class containing parameters related to configuring the lateral planner"];
  Node22 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -lateralReference_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node22 [label="{adore::fun::CancelMergeReference\n||+ CancelMergeReference()\l+ getValueIfAvailable()\l+ update()\l+ getDimension()\l+ getDerivative()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1CancelMergeReference.html",tooltip=" "];
  Node23 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node23 [label="{adore::fun::ANominalReference\n||+ getValueIfAvailable()\l+ update()\l+ getDimension()\l+ getDerivative()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1ANominalReference.html",tooltip=" "];
  Node24 -> Node22 [color="grey25",fontsize="10",style="solid",label=" -lcv_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node24 [label="{adore::view::ALaneChangeView\n||+ getSourceLane()\l+ getTargetLane()\l+ getLCDirection()\l+ getProgressOfGateOpen()\l+ getProgressOfGateClosed()\l+ getOffsetOfStartOuterBorder()\l+ getOffsetOfSeparatingBorder()\l+ getOffsetOfDestinationOuter\lBorder()\l+ getNavigationCostDifference()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1view_1_1ALaneChangeView.html",tooltip=" "];
  Node25 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -lateralOffsetConstraint\l_left_\n-lateralOffsetConstraint\l_right_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node25 [label="{adore::fun::LateralOffset\lConstraintLC\n|- width_\l- hard_safety_distance_\l- soft_safety_distance_\l- min_control_space_\l- direction_\l|+ LateralOffsetConstraintLC()\l+ setGap()\l+ getValue()\l+ update()\l+ getDirection()\l+ getDimension()\l+ getDerivative()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1LateralOffsetConstraintLC.html",tooltip=" "];
  Node20 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node24 -> Node25 [color="grey25",fontsize="10",style="solid",label=" -lcv_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 -> Node25 [color="grey25",fontsize="10",style="solid",label=" -pv_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node21 -> Node25 [color="grey25",fontsize="10",style="solid",label=" -plat_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node26 -> Node25 [color="grey25",fontsize="10",style="solid",label=" -gap_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node26 [label="{adore::view::AGap\n||+ getState()\l+ getLeadProgress()\l+ getChaseProgress()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1view_1_1AGap.html",tooltip="defines a gap in traffic, into which a merge may be planned"];
  Node27 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -followVehicleConstraint_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node27 [label="{adore::fun::FollowPreceding\lVehicle\n|- s_front_t0_\l- v_front_t0_\l- t0_\l|+ FollowPrecedingVehicle()\l+ getValue()\l+ update()\l+ getDirection()\l+ getDimension()\l+ getDerivative()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1FollowPrecedingVehicle.html",tooltip=" "];
  Node20 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 -> Node27 [color="grey25",fontsize="10",style="solid",label=" -pgen_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 -> Node27 [color="grey25",fontsize="10",style="solid",label=" -pveh_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 -> Node27 [color="grey25",fontsize="10",style="solid",label=" -lane_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node28 -> Node27 [color="grey25",fontsize="10",style="solid",label=" -ptac_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node28 [label="{adore::params::APTactical\lPlanner\n||+ getGlobalSpeedLimit()\l+ getResetRadius()\l+ getAccLatUB()\l+ getAccLatUB_minVelocity()\l+ getAccLonUB()\l+ getAccLonLB()\l+ getFrontTimeGap()\l+ getRearTimeGap()\l+ getFrontSGap()\l+ getLowerBoundFrontSGapForLF()\land 20 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APTacticalPlanner.html",tooltip="abstract classs containing parameters to configure aspects and constraints of the tactical planner"];
  Node29 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -lateralJerkReference_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node29 [label="{adore::fun::LateralJerkReference\n||+ LateralJerkReference()\l+ getValueIfAvailable()\l+ update()\l+ getDimension()\l+ getDerivative()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1LateralJerkReference.html",tooltip=" "];
  Node23 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 -> Node29 [color="grey25",fontsize="10",style="solid",label=" -lfv_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node30 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -lateralAccelerationReference_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node30 [label="{adore::fun::LateralAcceleration\lReference\n||+ LateralAccelerationReference()\l+ getValueIfAvailable()\l+ update()\l+ getDimension()\l+ getDerivative()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1LateralAccelerationReference.html",tooltip=" "];
  Node23 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 -> Node30 [color="grey25",fontsize="10",style="solid",label=" -lfv_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node31 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -lateralAccelerationConstraint\lLB_\n-lateralAccelerationConstraintUB_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node31 [label="{adore::fun::LateralAcceleration\lConstraint\n|- ay_ub_\l- ay_lb_\l- curvature_ub_\l- curvature_lb_\l- d_\l|+ LateralAccelerationConstraint()\l+ getValue()\l+ update()\l+ getDirection()\l+ getDimension()\l+ getDerivative()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1LateralAccelerationConstraint.html",tooltip=" "];
  Node20 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 -> Node31 [color="grey25",fontsize="10",style="solid",label=" -lfv_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node21 -> Node31 [color="grey25",fontsize="10",style="solid",label=" -p_" ,arrowhead="odiamond",fontname="Helvetica"];
}
