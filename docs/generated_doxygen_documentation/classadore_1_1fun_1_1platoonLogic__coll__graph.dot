digraph "adore::fun::platoonLogic"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{adore::fun::platoonLogic\n|+ CAR_FOLLOWING_TACTICS\l+ v2xStationID\l+ lanePosition\l+ communicationDelayThreshold\l+ data\l- NoCommunicationDelay_p\l- sameLane_p\l- possiblePlatooningTau\l- eps\l|+ platoonLogic()\l+ ~platoonLogic()\l+ update()\l- print()\l- printPlatooningState()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +platooningInformation" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{adore::fun::PlatooningInformation\n|- ToleratedDistanceAhead\l- ToleratedDistanceBehind\l- TargetAutomationLevel\l- LanePosition\l- id\l|+ set()\l+ setToleratedDistanceAhead()\l+ setToleratedDistanceBehind()\l+ setTargetAutomationLevel()\l+ setLanePosition()\l+ setId()\l+ getToleratedDistanceAhead()\l+ getToleratedDistanceBehind()\l+ getTargetAutomationLevel()\l+ getLanePosition()\l+ getId()\l+ PlatooningInformation()\l+ PlatooningInformation()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1fun_1_1PlatooningInformation.html",tooltip=" "];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +psm" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{adore::fun::logic::\lPlatooningStateMachine\n||+ getTimeHeadway()\l+ getPlatooningState()\l+ getInPlatoonTimeHeadway()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1fun_1_1logic_1_1PlatooningStateMachine.html",tooltip=" "];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{boost::statechart::\lstate_machine\< PlatooningState\lMachine, WANT_TO_FORM \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node5 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +dsm" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{adore::fun::logic::\lDistanceStateMachine\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1fun_1_1logic_1_1DistanceStateMachine.html",tooltip=" "];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{sc::state_machine\<\l DistanceStateMachine,\l NORMAL_DISTANCE \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node7 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +roadmap_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{adore::env::BorderBased\l::LocalRoadMap\n|- lanesNearVehicle_\l|+ LocalRoadMap()\l+ getEgoState()\l+ getBorderSet()\l+ getPrecedenceSet()\l+ getVehicleState()\l+ getVehicleParameters()\l+ getBorderTrace()\l+ getMatchedBorder()\l+ getBorderCostMap()\l+ isNavigationActive()\l+ getNavigationCost()\l+ updateEgoState()\l+ update()\l+ getControlledConnectionSet()\l- updateData()\l- discard_radius_based()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1LocalRoadMap.html",tooltip=" "];
  Node8 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -borderTrace_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{adore::env::BorderBased\l::BorderTrace\n|- m_trace\l- m_distance_limit\l- m_length\l|+ BorderTrace()\l+ BorderTrace()\l+ setDistanceLimit()\l+ getDistanceLimit()\l+ insert()\l+ begin()\l+ end()\l+ rbegin()\l+ rend()\l+ clear()\l+ front()\l+ back()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1BorderTrace.html",tooltip=" "];
  Node9 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -vehicleReader_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{adore::mad::AReader\< T \>\n||+ hasData()\l+ hasUpdate()\l+ getData()\l+ getDesc()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AReader.html",tooltip=" "];
  Node10 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -egoState_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{adore::env::VehicleMotion\lState9d\n|+ time_\l+ data_\l|+ getTime()\l+ getX()\l+ getY()\l+ getZ()\l+ getPSI()\l+ getvx()\l+ getvy()\l+ getOmega()\l+ getAx()\l+ getDelta()\land 10 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1VehicleMotionState9d.html",tooltip="This struct holds the motion state of the vehicle in 9d."];
  Node11 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -precedenceSet_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{adore::env::PrecedenceSet\n|- precedenceRT_\l|+ PrecedenceSet()\l+ PrecedenceSet()\l+ update()\l+ readFile()\l+ parseRule()\l+ insertRule()\l+ init()\l+ contains()\l+ eraseRule()\l+ getRulesInRegion()\l+ getAllRulesIt()\l+ getAllRules()\l+ getRulesOutsideRegion()\l+ refocus()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1PrecedenceSet.html",tooltip="PrecedenceSet contains PrecedenceRules, indexed by the area they affect."];
  Node12 -> Node11 [color="grey25",fontsize="10",style="solid",label=" -ruleFeed_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{adore::mad::AFeed\<\l adore::env::PrecedenceRule \>\n||+ hasNext()\l+ getNext()\l+ getLatest()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AFeed.html",tooltip=" "];
  Node13 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -borderSet_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 [label="{adore::env::BorderBased\l::BorderSet\n|# m_coord_uncertainty_xy\l# m_coord_uncertainty_z\l# m_guard\l# m_max_lane_width\l# m_byID\l# m_byLeftID\l# m_byFirstCoord\l# m_byLastCoord\l# m_byRegion\l# m_isOwner\l- m_allowedBorderTypes\l|+ BorderSet()\l+ ~BorderSet()\l+ addAllowedType()\l+ rotate()\l+ translate()\l+ removeAllowedType()\l+ borderTypeValid()\l+ setIsOwner()\l+ insert_border()\l+ erase_border()\land 46 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1BorderSet.html",tooltip="efficiently store borders in boost R-tree"];
  Node14 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -apVehicle_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 [label="{adore::params::APVehicle\n||+ get_vehicle_id()\l+ get_a()\l+ get_b()\l+ get_c()\l+ get_d()\l+ get_m()\l+ get_mu()\l+ get_g()\l+ get_h()\l+ get_cf()\land 17 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APVehicle.html",tooltip="abstract class for vehicle configuration related paremeters"];
  Node15 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -borderCostMap_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 [label="{adore::env::BorderBased\l::BorderCostMap\n||+ getRandomBorderIDCostPair()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1BorderCostMap.html",tooltip=" "];
  Node16 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node16 [label="{std::unordered_map\l\< BorderID, adore::env\l::NavigationCost, adore\l::env::BorderBased::BorderIDHasher \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node17 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -borderFeed_\n-navigationDataFeed_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node17 [label="{adore::mad::AFeed\< T \>\n||+ hasNext()\l+ getNext()\l+ getLatest()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AFeed.html",tooltip=" "];
  Node18 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -lms_continuation_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node18 [label="{adore::env::BorderBased\l::LMSContinuation\n|- m_lastMatch_initialized\l- m_delayedSwitching\l- m_a\l- m_b\l- m_c\l- m_d\l- m_w\l|+ LMSContinuation()\l+ setDimensions()\l+ getBestMatch()\l+ reset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1LMSContinuation.html",tooltip=" "];
  Node19 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node19 [label="{adore::env::BorderBased\l::LaneMatchingStrategy\n||+ getBestMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1LaneMatchingStrategy.html",tooltip=" "];
  Node13 -> Node18 [color="grey25",fontsize="10",style="solid",label=" -m_borderSet" ,arrowhead="odiamond",fontname="Helvetica"];
  Node20 -> Node18 [color="grey25",fontsize="10",style="solid",label=" -m_lastMatch" ,arrowhead="odiamond",fontname="Helvetica"];
  Node20 [label="{adore::env::BorderBased\l::BorderID\n||+ BorderID()\l+ BorderID()\l+ translate()\l+ distance()\l+ distance()\l+ getLength()\l+ rotate()\l+ operator==()\l+ inverse()\l+ operator\<()\l+ toString()\l+ isInArea()\l+ getReverseDirectionID()\l+ getReverseDirectionID()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1BorderBased_1_1BorderID.html",tooltip="This struct identifies a Border by the coordinates of the starting and the end point."];
  Node21 -> Node20 [color="grey25",fontsize="10",style="solid",label=" +m_first\n+m_last" ,arrowhead="odiamond",fontname="Helvetica"];
  Node21 [label="{adore::env::BorderBased\l::Coordinate\n|+ m_X\l+ m_Y\l+ m_Z\l|+ Coordinate()\l+ Coordinate()\l+ Coordinate()\l+ Coordinate()\l+ translate()\l+ rotate()\l+ discretize()\l+ distance()\l+ isNear()\l+ operator==()\land 8 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1BorderBased_1_1Coordinate.html",tooltip="This struct represents 3-dimensional coordines."];
  Node22 -> Node18 [color="grey25",fontsize="10",style="solid",label=" -m_nearestLaneStragey" ,arrowhead="odiamond",fontname="Helvetica"];
  Node22 [label="{adore::env::BorderBased\l::LMSNearest\n|- m_w_orientation\l|+ LMSNearest()\l+ getBestMatch()\l+ getBestMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1LMSNearest.html",tooltip=" "];
  Node19 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node13 -> Node22 [color="grey25",fontsize="10",style="solid",label=" -m_borderSet" ,arrowhead="odiamond",fontname="Helvetica"];
  Node23 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -matchedLane_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node23 [label="{adore::env::BorderBased\l::Border\n|+ m_type\l|+ Border()\l+ ~Border()\l+ operator=()\l+ Border()\l+ Border()\l+ Border()\l+ Border()\l+ Border()\l+ Border()\l+ Border()\land 30 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1BorderBased_1_1Border.html",tooltip="The border struct contains data of the smallest."];
  Node24 -> Node23 [color="grey25",fontsize="10",style="solid",label=" +m_path" ,arrowhead="odiamond",fontname="Helvetica"];
  Node24 [label="{adore::mad::LLinearPiecewise\lFunctionM\< T, n \>\n|- m_data\l- m_searchIndex\l|+ getData()\l+ getData()\l+ findIndex()\l+ f()\l+ limitHi()\l+ limitLo()\l+ setLimits()\l+ create_derivative()\l+ bound()\l+ limit_s_to_bounds()\land 42 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1LLinearPiecewiseFunctionM.html",tooltip=" "];
  Node25 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node25 [label="{adore::mad::AScalarToN\l\< T, n \>\n||+ toArray()\l+ toArray()\l+ dimension()\l+ fi()\l+ multiply()\l+ add()\l+ operator*=()\l+ operator+=()\l+ operator-=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AScalarToN.html",tooltip=" "];
  Node26 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node26 [label="{adore::mad::ALFunction\l\< T, adoreMatrix\< T, N,\l 1 \> \>\n|- cached_ymin\l- cached_ymax\l- cached_bounds_valid\l|+ setLimits()\l+ limitHi()\l+ limitLo()\l+ f()\l+ f()\l+ clone()\l+ create_derivative()\l+ bound()\l+ bound()\l+ ~ALFunction()\l+ ALFunction()\l+ operator()()\l+ isInDomain()\l+ f_bounded()\l+ invalidateCachedBounds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1ALFunction.html",tooltip=" "];
  Node27 -> Node24 [color="grey25",fontsize="10",style="solid",label=" -single_dimensions" ,arrowhead="odiamond",fontname="Helvetica"];
  Node27 [label="{adore::mad::LLinearPiecewise\lFunctionM\< T, n \>::OneDimension\n|- m_row\l|+ OneDimension()\l+ OneDimension()\l+ f()\l+ limitHi()\l+ limitLo()\l+ setLimits()\l+ clone()\l+ create_derivative()\l+ bound()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1LLinearPiecewiseFunctionM_1_1OneDimension.html",tooltip=" "];
  Node24 -> Node27 [color="grey25",fontsize="10",style="solid",label=" -m_parent" ,arrowhead="odiamond",fontname="Helvetica"];
  Node20 -> Node23 [color="grey25",fontsize="10",style="solid",label=" +m_id\n+m_left" ,arrowhead="odiamond",fontname="Helvetica"];
  Node29 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -connectionSet_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node29 [label="{adore::env::ControlledConnectionSet\n|- feeds_\l- max_value_\l|+ ControlledConnectionSet()\l+ ~ControlledConnectionSet()\l+ update()\l+ getConnectionsInRegion()\l+ size()\l+ getAllConnections()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1ControlledConnectionSet.html",tooltip=" "];
  Node30 -> Node29 [color="grey25",fontsize="10",style="solid",label=" -data_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node30 [label="{adore::env::LocalBoxSet\l\< ControlledConnection,\l BoxGen, Comparator \>\n|- data_\l|+ insert()\l+ find()\l+ contains()\l+ remove()\l+ size()\l+ getObjectsInRegion()\l+ getObjectsOutsideRegion()\l+ refocus()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1LocalBoxSet.html",tooltip=" "];
  Node31 -> Node30 [color="grey25",fontsize="10",style="solid",label=" -compare_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node31 [label="{adore::env::ControlledConnection\lSet::Comparator\n||+ operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1ControlledConnectionSet_1_1Comparator.html",tooltip=" "];
  Node32 -> Node30 [color="grey25",fontsize="10",style="solid",label=" -boxgen_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node32 [label="{adore::env::ControlledConnection\lSet::BoxGen\n||+ operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1ControlledConnectionSet_1_1BoxGen.html",tooltip=" "];
  Node33 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -apLocalRoadMap_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node33 [label="{adore::params::APLocalRoadMap\n||+ getDiscardRadius()\l+ isNavigationActive()\l+ getBorderTraceLength()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APLocalRoadMap.html",tooltip="abstract class to configure the local view of the road map"];
  Node34 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -lms_navigation_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node34 [label="{adore::env::BorderBased\l::LMSNavigation\n|- m_lastMatch_initialized\l|+ LMSNavigation()\l+ getBestMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1LMSNavigation.html",tooltip=" "];
  Node19 -> Node34 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node13 -> Node34 [color="grey25",fontsize="10",style="solid",label=" -m_borderSet" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 -> Node34 [color="grey25",fontsize="10",style="solid",label=" -m_borderID2Cost" ,arrowhead="odiamond",fontname="Helvetica"];
  Node18 -> Node34 [color="grey25",fontsize="10",style="solid",label=" -m_continuationStrategy" ,arrowhead="odiamond",fontname="Helvetica"];
  Node20 -> Node34 [color="grey25",fontsize="10",style="solid",label=" -m_lastMatch" ,arrowhead="odiamond",fontname="Helvetica"];
  Node35 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -three_lanes_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node35 [label="{adore::env::ThreeLaneView\lDecoupled\n|- participantSet_\l- monitor_traffic_\l|+ ThreeLaneViewDecoupled()\l+ ~ThreeLaneViewDecoupled()\l+ update()\l+ getCurrentLane()\l+ getLeftLaneChange()\l+ getRightLaneChange()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1ThreeLaneViewDecoupled.html",tooltip=" "];
  Node36 -> Node35 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node36 [label="{adore::view::AThreeLaneView\n||+ getCurrentLane()\l+ getLeftLaneChange()\l+ getRightLaneChange()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1view_1_1AThreeLaneView.html",tooltip=" "];
  Node9 -> Node35 [color="grey25",fontsize="10",style="solid",label=" -tpsetReader_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 -> Node35 [color="grey25",fontsize="10",style="solid",label=" -borderSet_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node17 -> Node35 [color="grey25",fontsize="10",style="solid",label=" -laneFeed_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node37 -> Node35 [color="grey25",fontsize="10",style="solid",label=" -to_left_\n-to_right_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node37 [label="{adore::env::ThreeLaneView\lDecoupled::LaneChangeViewProxy\n||+ limitS()\l+ LaneChangeViewProxy()\l+ setLanes()\l+ getSourceLane()\l+ getTargetLane()\l+ getLCDirection()\l+ getProgressOfGateOpen()\l+ getProgressOfGateClosed()\l+ getOffsetOfStartOuterBorder()\l+ getOffsetOfSeparatingBorder()\l+ getOffsetOfDestinationOuter\lBorder()\l+ getNavigationCostDifference()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1ThreeLaneViewDecoupled_1_1LaneChangeViewProxy.html",tooltip=" "];
  Node38 -> Node37 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node38 [label="{adore::view::ALaneChangeView\n||+ getSourceLane()\l+ getTargetLane()\l+ getLCDirection()\l+ getProgressOfGateOpen()\l+ getProgressOfGateClosed()\l+ getOffsetOfStartOuterBorder()\l+ getOffsetOfSeparatingBorder()\l+ getOffsetOfDestinationOuter\lBorder()\l+ getNavigationCostDifference()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1view_1_1ALaneChangeView.html",tooltip=" "];
  Node39 -> Node37 [color="grey25",fontsize="10",style="solid",label=" +data_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node39 [label="{adore::env::BorderBased\l::LaneChangeDataProxy\n|+ gate_s0\l+ gate_s1\l+ direction\l+ isValid\l+ viewingDistance\l|+ LaneChangeDataProxy()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1BorderBased_1_1LaneChangeDataProxy.html",tooltip="simple struct to hole data relevant to lane change geometry"];
  Node40 -> Node39 [color="grey25",fontsize="10",style="solid",label=" +separatingBorderDistance\l_fct\n+sourceOuterBorderDistance\l_fct\n+targetOuterBorderDistance_fct" ,arrowhead="odiamond",fontname="Helvetica"];
  Node40 [label="{adore::mad::LLinearPiecewise\lFunctionM\< double, 1 \>\n|- m_data\l- m_searchIndex\l|+ getData()\l+ getData()\l+ findIndex()\l+ f()\l+ limitHi()\l+ limitLo()\l+ setLimits()\l+ create_derivative()\l+ bound()\l+ limit_s_to_bounds()\land 42 more...\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1LLinearPiecewiseFunctionM.html",tooltip=" "];
  Node27 -> Node40 [color="grey25",fontsize="10",style="solid",label=" -single_dimensions" ,arrowhead="odiamond",fontname="Helvetica"];
  Node43 -> Node37 [color="grey25",fontsize="10",style="solid",label=" +source_\n+target_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node43 [label="{adore::env::ThreeLaneView\lDecoupled::LaneProxy\n|+ s_offset_\l|+ LaneProxy()\l+ limitS()\l+ isValid()\l+ getSMax()\l+ getSMin()\l+ syncS()\l+ getProgressOfWidthOpen()\l+ getProgressOfWidthClosed()\l+ getOnLaneTraffic()\l+ getConflictSet()\land 13 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1ThreeLaneViewDecoupled_1_1LaneProxy.html",tooltip=" "];
  Node44 -> Node43 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node44 [label="{adore::view::ALane\n||+ isValid()\l+ getSMax()\l+ getSMin()\l+ inSRange()\l+ getProgressOfWidthOpen()\l+ getProgressOfWidthClosed()\l+ getOnLaneTraffic()\l+ getConflictSet()\l+ getSpeedLimit()\l+ getLeftIndicatorHint()\land 11 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1view_1_1ALane.html",tooltip=" "];
  Node45 -> Node43 [color="grey25",fontsize="10",style="solid",label=" +data_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node45 [label="{adore::env::BorderBased\l::LaneGeometryDataProxy\n|+ isValid\l|+ LaneGeometryDataProxy()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1BorderBased_1_1LaneGeometryDataProxy.html",tooltip=" "];
  Node40 -> Node45 [color="grey25",fontsize="10",style="solid",label=" +centerSmoothedCurvature\lDerivative_fct\n+centerSmoothedCurvature\l_fct\n+leftDistance_fct\n+left_indicator_hint\l_fct\n+navigationCost_fct\n+rightDistance_fct\n+right_indicator_hint\l_fct\n+speedLimit_fct" ,arrowhead="odiamond",fontname="Helvetica"];
  Node46 -> Node45 [color="grey25",fontsize="10",style="solid",label=" +centerSmoothed_fct" ,arrowhead="odiamond",fontname="Helvetica"];
  Node46 [label="{adore::mad::LLinearPiecewise\lFunctionM\< double, 3 \>\n|- m_data\l- m_searchIndex\l|+ getData()\l+ getData()\l+ findIndex()\l+ f()\l+ limitHi()\l+ limitLo()\l+ setLimits()\l+ create_derivative()\l+ bound()\l+ limit_s_to_bounds()\land 42 more...\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1LLinearPiecewiseFunctionM.html",tooltip=" "];
  Node27 -> Node46 [color="grey25",fontsize="10",style="solid",label=" -single_dimensions" ,arrowhead="odiamond",fontname="Helvetica"];
  Node47 -> Node45 [color="grey25",fontsize="10",style="solid",label=" +centerNormal_fct" ,arrowhead="odiamond",fontname="Helvetica"];
  Node47 [label="{adore::mad::LLinearPiecewise\lFunctionM\< double, 2 \>\n|- m_data\l- m_searchIndex\l|+ getData()\l+ getData()\l+ findIndex()\l+ f()\l+ limitHi()\l+ limitLo()\l+ setLimits()\l+ create_derivative()\l+ bound()\l+ limit_s_to_bounds()\land 42 more...\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1LLinearPiecewiseFunctionM.html",tooltip=" "];
  Node27 -> Node47 [color="grey25",fontsize="10",style="solid",label=" -single_dimensions" ,arrowhead="odiamond",fontname="Helvetica"];
  Node48 -> Node43 [color="grey25",fontsize="10",style="solid",label=" +queueOnThisLane_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node48 [label="{adore::env::traffic\l::TrafficQueueOnALane\n|- queue_\l|+ getQueue()\l+ mapVehicles()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1traffic_1_1TrafficQueueOnALane.html",tooltip=" "];
  Node43 -> Node35 [color="grey25",fontsize="10",style="solid",label=" -center_\n-left_\n-right_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node49 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +platooningInformation\l_writer" ,arrowhead="odiamond",fontname="Helvetica"];
  Node49 [label="{adore::mad::AWriter\l\< adore::fun::PlatooningInformation \>\n||+ canWriteMore()\l+ write()\l+ getDesc()\l+ getNumberOfSubscribers()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AWriter.html",tooltip=" "];
  Node50 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -CooperativeUsersProcess" ,arrowhead="odiamond",fontname="Helvetica"];
  Node50 [label="{adore::env::CooperativeUsers\lProcess\n|- Cooperative_frontMans\l- Cooperative_behindMans\l- preceding_exist\l- leader_exist\l- precedingIsLeader\l- following_exist\l- frontManIsCooperative\l- followingIsCooperative\l- ego_progress_front_side\l- ego_progress_rear_side\land 9 more...\l|+ getFrontMansList()\l+ getBehindMansList()\l+ getPreceding()\l+ getLeader()\l+ getFollowing()\l+ precedingExists()\l+ leaderExists()\l+ followingExists()\l+ leaderIsPreceding()\l+ getDistanceToLeader()\land 12 more...\l- compare()\l- sort()\l- processIntention()\l- intentionPredictionPrint()\l- print_debug()\l- toCenterOfTheRearSide()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1CooperativeUsersProcess.html",tooltip=" "];
  Node51 -> Node50 [color="grey25",fontsize="10",style="solid",label=" -pp_v" ,arrowhead="odiamond",fontname="Helvetica"];
  Node51 [label="{adore::mad::CubicPiecewise\lFunction::PieceweisePolynomial\n|+ breaks\l+ coef_1\l+ coef_2\l+ coef_3\l+ coef_4\l+ dimension\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1mad_1_1CubicPiecewiseFunction_1_1PieceweisePolynomial.html",tooltip=" "];
  Node14 -> Node50 [color="grey25",fontsize="10",style="solid",label=" -pveh" ,arrowhead="odiamond",fontname="Helvetica"];
  Node52 -> Node50 [color="grey25",fontsize="10",style="solid",label=" -following\n-leader\n-preceding" ,arrowhead="odiamond",fontname="Helvetica"];
  Node52 [label="{adore::env::CooperativeUsers\lProcess::CooperativeUser\n|+ PlatooningState\l+ inPlatooningRange\l+ progress_front_side\l+ progress_rear_side\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1CooperativeUsersProcess_1_1CooperativeUser.html",tooltip="prediction plus CACC(Platoon)"];
  Node53 -> Node52 [color="grey25",fontsize="10",style="solid",label=" +MCM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node53 [label="{adore::env::CooperativeUser\lPrediction\n|+ id\l+ toletated_distance\l_behind\l+ toletated_distance\l_ahead\l+ target_automation_level\l+ lane_position\l+ vehicleLength\l+ vehicleWidth\l+ communicationDelay\l+ x\l+ y\land 6 more...\l|+ setId()\l+ setLanePosition()\l+ setTargetAutomationLevel()\l+ setToletatedDistanceBehind()\l+ setToletatedDistanceAhead()\l+ setVehicleLength()\l+ setVehicleWidth()\l+ clear()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1CooperativeUserPrediction.html",tooltip=" "];
  Node35 -> Node50 [color="grey25",fontsize="10",style="solid",label=" -three_lanes_" ,arrowhead="odiamond",fontname="Helvetica"];
}
