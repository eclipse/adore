digraph "adore::env::BorderBased::StopLine"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{adore::env::BorderBased\l::StopLine\n|+ m_state\l+ m_speedAdvisories\l+ m_tswitch\l+ m_signalGroupID\l|+ StopLine()\l+ StopLine()\l+ StopLine()\l+ StopLine()\l+ getLanePosition()\l+ translate()\l+ rotate()\l+ getSwitchingTime()\l+ setSwitchingTime()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="This class provide information about stoplines."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{adore::env::BorderBased\l::ALanePositionedObject\n||+ getLanePosition()\l+ ~ALanePositionedObject()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1ALanePositionedObject.html",tooltip="Abstract class for Objects that are positioned by a connection to a certain lane."];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +m_position" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{adore::env::BorderBased\l::LanePosition\n|+ m_progress\l|+ LanePosition()\l+ LanePosition()\l+ LanePosition()\l+ translate()\l+ rotate()\l+ operator==()\l+ toString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1BorderBased_1_1LanePosition.html",tooltip="This is a struct that contains a position defined by a BorderID and a progress on that border."];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +m_rightID" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{adore::env::BorderBased\l::BorderID\n||+ BorderID()\l+ BorderID()\l+ translate()\l+ distance()\l+ distance()\l+ getLength()\l+ rotate()\l+ operator==()\l+ inverse()\l+ operator\<()\l+ toString()\l+ isInArea()\l+ getReverseDirectionID()\l+ getReverseDirectionID()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1BorderBased_1_1BorderID.html",tooltip="This struct identifies a Border by the coordinates of the starting and the end point."];
  Node5 -> Node4 [color="grey25",fontsize="10",style="solid",label=" +m_first\n+m_last" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{adore::env::BorderBased\l::Coordinate\n|+ m_X\l+ m_Y\l+ m_Z\l|+ Coordinate()\l+ Coordinate()\l+ Coordinate()\l+ Coordinate()\l+ translate()\l+ rotate()\l+ discretize()\l+ distance()\l+ isNear()\l+ operator==()\land 8 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1BorderBased_1_1Coordinate.html",tooltip="This struct represents 3-dimensional coordines."];
}
