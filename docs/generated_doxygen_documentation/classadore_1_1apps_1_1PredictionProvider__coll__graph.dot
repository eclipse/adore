digraph "adore::apps::PredictionProvider"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{adore::apps::PredictionProvider\n|- participantSet_\l- predictionSet_ex_\l- predictionSet_wc_\l|+ PredictionProvider()\l+ run()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -predictor_straight\l_ex_\n-predictor_straight_wc_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{adore::env::OCStraightLine\lPrediction\n|- t_max_utc_\l- lat_precision_\l- lat_error_\l- lon_error_\l- v_max_\l- a_max_\l- a_min_\l- time_headway_\l- time_leeway_\l- width_ub_\l- width_lb_\l|+ setTMaxUTC()\l+ setLatPrecision()\l+ setLatError()\l+ setLonError()\l+ setVMax()\l+ setAMax()\l+ setAMin()\l+ setTimeHeadway()\l+ setTimeLeeway()\l+ setWidthUB()\l+ setWidthLB()\l+ OCStraightLinePrediction()\l+ predict()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1OCStraightLinePrediction.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{adore::env::OCPrediction\lStrategy\< traffic::Participant \>\n||+ predict()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1OCPredictionStrategy.html",tooltip=" "];
  Node4 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -tpsetReader_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{adore::mad::AReader\< T \>\n||+ hasData()\l+ hasUpdate()\l+ getData()\l+ getDesc()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AReader.html",tooltip=" "];
  Node5 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -pprediction_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{adore::params::APPrediction\n||+ get_roadbased_prediction\l_duration()\l+ get_roadbased_expected\l_acc_ub()\l+ get_roadbased_expected\l_acc_ub_delay()\l+ get_roadbased_expected\l_acc_lb()\l+ get_roadbased_expected\l_vel_ub()\l+ get_roadbased_worstcase\l_acc_ub()\l+ get_roadbased_worstcase\l_acc_ub_delay()\l+ get_roadbased_worstcase\l_acc_lb()\l+ get_roadbased_worstcase\l_vel_ub()\l+ get_roadbased_heading\l_deviation_ub()\land 25 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APPrediction.html",tooltip="parameter interface for parameters related to prediction"];
  Node6 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -predictor_roadbased\l_ex_\n-predictor_roadbased_wc_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{adore::env::OCRoadBasedPrediction\n|- t_max_utc_\l- lat_precision_\l- lat_error_\l- lon_error_\l- v_max_\l- a_max_\l- a_min_\l- angle_error_max_\l- time_headway_\l- time_leeway_\l- delay_\l- lane_width_predictions_\l- lateral_predictions_\l- width_ub_\l- width_lb_\l|+ setAngleErrorMax()\l+ setTMaxUTC()\l+ setLatPrecision()\l+ setLatError()\l+ setLonError()\l+ setVMax()\l+ setAMax()\l+ setAMin()\l+ setTimeHeadway()\l+ setTimeLeeway()\land 19 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1OCRoadBasedPrediction.html",tooltip=" "];
  Node3 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 -> Node6 [color="grey25",fontsize="10",style="solid",label=" -trafficMap_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{adore::env::traffic\l::TrafficMap\n|- borderToParticipant_\l- participantToBorder_\l- trackingIDToParticipant_\l- participantSet_\l|+ getTrafficParticipantSet()\l+ getBorderSet()\l+ getBorderToParticipant()\l+ getParticipantToBorder()\l+ getTrackingIDToParticipant()\l+ TrafficMap()\l+ TrafficMap()\l+ update()\l+ matchBorders()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1traffic_1_1TrafficMap.html",tooltip=" "];
  Node4 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -tpsetReader_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -borderSet_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{adore::env::BorderBased\l::BorderSet\n|# m_coord_uncertainty_xy\l# m_coord_uncertainty_z\l# m_guard\l# m_max_lane_width\l# m_byID\l# m_byLeftID\l# m_byFirstCoord\l# m_byLastCoord\l# m_byRegion\l# m_isOwner\l- m_allowedBorderTypes\l|+ BorderSet()\l+ ~BorderSet()\l+ addAllowedType()\l+ rotate()\l+ translate()\l+ removeAllowedType()\l+ borderTypeValid()\l+ setIsOwner()\l+ insert_border()\l+ erase_border()\land 46 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1BorderSet.html",tooltip="efficiently store borders in boost R-tree"];
  Node7 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -traffic_map_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -prediction_writer\l_ex_\n-prediction_writer_wc_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{adore::mad::AWriter\< T \>\n||+ canWriteMore()\l+ write()\l+ getDesc()\l+ getNumberOfSubscribers()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AWriter.html",tooltip=" "];
  Node10 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -roadmap_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{adore::env::BorderBased\l::LocalRoadMap\n|- lanesNearVehicle_\l|+ LocalRoadMap()\l+ getEgoState()\l+ getBorderSet()\l+ getPrecedenceSet()\l+ getVehicleState()\l+ getVehicleParameters()\l+ getBorderTrace()\l+ getMatchedBorder()\l+ getBorderCostMap()\l+ isNavigationActive()\l+ getNavigationCost()\l+ updateEgoState()\l+ update()\l+ getControlledConnectionSet()\l- updateData()\l- discard_radius_based()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1LocalRoadMap.html",tooltip=" "];
  Node11 -> Node10 [color="grey25",fontsize="10",style="solid",label=" -borderTrace_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{adore::env::BorderBased\l::BorderTrace\n|- m_trace\l- m_distance_limit\l- m_length\l|+ BorderTrace()\l+ BorderTrace()\l+ setDistanceLimit()\l+ getDistanceLimit()\l+ insert()\l+ begin()\l+ end()\l+ rbegin()\l+ rend()\l+ clear()\l+ front()\l+ back()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1BorderTrace.html",tooltip=" "];
  Node4 -> Node10 [color="grey25",fontsize="10",style="solid",label=" -vehicleReader_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 -> Node10 [color="grey25",fontsize="10",style="solid",label=" -egoState_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{adore::env::VehicleMotion\lState9d\n|+ time_\l+ data_\l|+ getTime()\l+ getX()\l+ getY()\l+ getZ()\l+ getPSI()\l+ getvx()\l+ getvy()\l+ getOmega()\l+ getAx()\l+ getDelta()\land 10 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1VehicleMotionState9d.html",tooltip="This struct holds the motion state of the vehicle in 9d."];
  Node13 -> Node10 [color="grey25",fontsize="10",style="solid",label=" -precedenceSet_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 [label="{adore::env::PrecedenceSet\n|- precedenceRT_\l|+ PrecedenceSet()\l+ PrecedenceSet()\l+ update()\l+ readFile()\l+ parseRule()\l+ insertRule()\l+ init()\l+ contains()\l+ eraseRule()\l+ getRulesInRegion()\l+ getAllRulesIt()\l+ getAllRules()\l+ getRulesOutsideRegion()\l+ refocus()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1PrecedenceSet.html",tooltip="PrecedenceSet contains PrecedenceRules, indexed by the area they affect."];
  Node14 -> Node13 [color="grey25",fontsize="10",style="solid",label=" -ruleFeed_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 [label="{adore::mad::AFeed\<\l adore::env::PrecedenceRule \>\n||+ hasNext()\l+ getNext()\l+ getLatest()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AFeed.html",tooltip=" "];
  Node8 -> Node10 [color="grey25",fontsize="10",style="solid",label=" -borderSet_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 -> Node10 [color="grey25",fontsize="10",style="solid",label=" -apVehicle_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 [label="{adore::params::APVehicle\n||+ get_vehicle_id()\l+ get_a()\l+ get_b()\l+ get_c()\l+ get_d()\l+ get_m()\l+ get_mu()\l+ get_g()\l+ get_h()\l+ get_cf()\land 17 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APVehicle.html",tooltip="abstract class for vehicle configuration related paremeters"];
  Node16 -> Node10 [color="grey25",fontsize="10",style="solid",label=" -borderCostMap_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node16 [label="{adore::env::BorderBased\l::BorderCostMap\n||+ getRandomBorderIDCostPair()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1BorderCostMap.html",tooltip=" "];
  Node17 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node17 [label="{std::unordered_map\l\< BorderID, adore::env\l::NavigationCost, adore\l::env::BorderBased::BorderIDHasher \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node18 -> Node10 [color="grey25",fontsize="10",style="solid",label=" -borderFeed_\n-navigationDataFeed_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node18 [label="{adore::mad::AFeed\< T \>\n||+ hasNext()\l+ getNext()\l+ getLatest()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AFeed.html",tooltip=" "];
  Node19 -> Node10 [color="grey25",fontsize="10",style="solid",label=" -lms_continuation_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node19 [label="{adore::env::BorderBased\l::LMSContinuation\n|- m_lastMatch_initialized\l- m_delayedSwitching\l- m_a\l- m_b\l- m_c\l- m_d\l- m_w\l|+ LMSContinuation()\l+ setDimensions()\l+ getBestMatch()\l+ reset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1LMSContinuation.html",tooltip=" "];
  Node20 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node20 [label="{adore::env::BorderBased\l::LaneMatchingStrategy\n||+ getBestMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1LaneMatchingStrategy.html",tooltip=" "];
  Node8 -> Node19 [color="grey25",fontsize="10",style="solid",label=" -m_borderSet" ,arrowhead="odiamond",fontname="Helvetica"];
  Node21 -> Node19 [color="grey25",fontsize="10",style="solid",label=" -m_lastMatch" ,arrowhead="odiamond",fontname="Helvetica"];
  Node21 [label="{adore::env::BorderBased\l::BorderID\n||+ BorderID()\l+ BorderID()\l+ translate()\l+ distance()\l+ distance()\l+ getLength()\l+ rotate()\l+ operator==()\l+ inverse()\l+ operator\<()\l+ toString()\l+ isInArea()\l+ getReverseDirectionID()\l+ getReverseDirectionID()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1BorderBased_1_1BorderID.html",tooltip="This struct identifies a Border by the coordinates of the starting and the end point."];
  Node22 -> Node21 [color="grey25",fontsize="10",style="solid",label=" +m_first\n+m_last" ,arrowhead="odiamond",fontname="Helvetica"];
  Node22 [label="{adore::env::BorderBased\l::Coordinate\n|+ m_X\l+ m_Y\l+ m_Z\l|+ Coordinate()\l+ Coordinate()\l+ Coordinate()\l+ Coordinate()\l+ translate()\l+ rotate()\l+ discretize()\l+ distance()\l+ isNear()\l+ operator==()\land 8 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1BorderBased_1_1Coordinate.html",tooltip="This struct represents 3-dimensional coordines."];
  Node23 -> Node19 [color="grey25",fontsize="10",style="solid",label=" -m_nearestLaneStragey" ,arrowhead="odiamond",fontname="Helvetica"];
  Node23 [label="{adore::env::BorderBased\l::LMSNearest\n|- m_w_orientation\l|+ LMSNearest()\l+ getBestMatch()\l+ getBestMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1LMSNearest.html",tooltip=" "];
  Node20 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 -> Node23 [color="grey25",fontsize="10",style="solid",label=" -m_borderSet" ,arrowhead="odiamond",fontname="Helvetica"];
  Node24 -> Node10 [color="grey25",fontsize="10",style="solid",label=" -matchedLane_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node24 [label="{adore::env::BorderBased\l::Border\n|+ m_type\l|+ Border()\l+ ~Border()\l+ operator=()\l+ Border()\l+ Border()\l+ Border()\l+ Border()\l+ Border()\l+ Border()\l+ Border()\land 30 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1BorderBased_1_1Border.html",tooltip="The border struct contains data of the smallest."];
  Node25 -> Node24 [color="grey25",fontsize="10",style="solid",label=" +m_path" ,arrowhead="odiamond",fontname="Helvetica"];
  Node25 [label="{adore::mad::LLinearPiecewise\lFunctionM\< T, n \>\n|- m_data\l- m_searchIndex\l|+ getData()\l+ getData()\l+ findIndex()\l+ f()\l+ limitHi()\l+ limitLo()\l+ setLimits()\l+ create_derivative()\l+ bound()\l+ limit_s_to_bounds()\land 42 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1LLinearPiecewiseFunctionM.html",tooltip=" "];
  Node26 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node26 [label="{adore::mad::AScalarToN\l\< T, n \>\n||+ toArray()\l+ toArray()\l+ dimension()\l+ fi()\l+ multiply()\l+ add()\l+ operator*=()\l+ operator+=()\l+ operator-=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AScalarToN.html",tooltip=" "];
  Node27 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node27 [label="{adore::mad::ALFunction\l\< T, adoreMatrix\< T, N,\l 1 \> \>\n|- cached_ymin\l- cached_ymax\l- cached_bounds_valid\l|+ setLimits()\l+ limitHi()\l+ limitLo()\l+ f()\l+ f()\l+ clone()\l+ create_derivative()\l+ bound()\l+ bound()\l+ ~ALFunction()\l+ ALFunction()\l+ operator()()\l+ isInDomain()\l+ f_bounded()\l+ invalidateCachedBounds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1ALFunction.html",tooltip=" "];
  Node28 -> Node25 [color="grey25",fontsize="10",style="solid",label=" -single_dimensions" ,arrowhead="odiamond",fontname="Helvetica"];
  Node28 [label="{adore::mad::LLinearPiecewise\lFunctionM\< T, n \>::OneDimension\n|- m_row\l|+ OneDimension()\l+ OneDimension()\l+ f()\l+ limitHi()\l+ limitLo()\l+ setLimits()\l+ clone()\l+ create_derivative()\l+ bound()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1LLinearPiecewiseFunctionM_1_1OneDimension.html",tooltip=" "];
  Node29 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node29 [label="{adore::mad::ALFunction\l\< DT, T \>\n|- cached_ymin\l- cached_ymax\l- cached_bounds_valid\l|+ setLimits()\l+ limitHi()\l+ limitLo()\l+ f()\l+ f()\l+ clone()\l+ create_derivative()\l+ bound()\l+ bound()\l+ ~ALFunction()\l+ ALFunction()\l+ operator()()\l+ isInDomain()\l+ f_bounded()\l+ invalidateCachedBounds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1ALFunction.html",tooltip=" "];
  Node25 -> Node28 [color="grey25",fontsize="10",style="solid",label=" -m_parent" ,arrowhead="odiamond",fontname="Helvetica"];
  Node21 -> Node24 [color="grey25",fontsize="10",style="solid",label=" +m_id\n+m_left" ,arrowhead="odiamond",fontname="Helvetica"];
  Node30 -> Node10 [color="grey25",fontsize="10",style="solid",label=" -connectionSet_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node30 [label="{adore::env::ControlledConnectionSet\n|- feeds_\l- max_value_\l|+ ControlledConnectionSet()\l+ ~ControlledConnectionSet()\l+ update()\l+ getConnectionsInRegion()\l+ size()\l+ getAllConnections()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1ControlledConnectionSet.html",tooltip=" "];
  Node31 -> Node30 [color="grey25",fontsize="10",style="solid",label=" -data_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node31 [label="{adore::env::LocalBoxSet\l\< ControlledConnection,\l BoxGen, Comparator \>\n|- data_\l|+ insert()\l+ find()\l+ contains()\l+ remove()\l+ size()\l+ getObjectsInRegion()\l+ getObjectsOutsideRegion()\l+ refocus()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1LocalBoxSet.html",tooltip=" "];
  Node32 -> Node31 [color="grey25",fontsize="10",style="solid",label=" -compare_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node32 [label="{adore::env::ControlledConnection\lSet::Comparator\n||+ operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1ControlledConnectionSet_1_1Comparator.html",tooltip=" "];
  Node33 -> Node31 [color="grey25",fontsize="10",style="solid",label=" -boxgen_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node33 [label="{adore::env::ControlledConnection\lSet::BoxGen\n||+ operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1ControlledConnectionSet_1_1BoxGen.html",tooltip=" "];
  Node34 -> Node10 [color="grey25",fontsize="10",style="solid",label=" -apLocalRoadMap_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node34 [label="{adore::params::APLocalRoadMap\n||+ getDiscardRadius()\l+ isNavigationActive()\l+ getBorderTraceLength()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APLocalRoadMap.html",tooltip="abstract class to configure the local view of the road map"];
  Node35 -> Node10 [color="grey25",fontsize="10",style="solid",label=" -lms_navigation_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node35 [label="{adore::env::BorderBased\l::LMSNavigation\n|- m_lastMatch_initialized\l|+ LMSNavigation()\l+ getBestMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1LMSNavigation.html",tooltip=" "];
  Node20 -> Node35 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 -> Node35 [color="grey25",fontsize="10",style="solid",label=" -m_borderSet" ,arrowhead="odiamond",fontname="Helvetica"];
  Node16 -> Node35 [color="grey25",fontsize="10",style="solid",label=" -m_borderID2Cost" ,arrowhead="odiamond",fontname="Helvetica"];
  Node19 -> Node35 [color="grey25",fontsize="10",style="solid",label=" -m_continuationStrategy" ,arrowhead="odiamond",fontname="Helvetica"];
  Node21 -> Node35 [color="grey25",fontsize="10",style="solid",label=" -m_lastMatch" ,arrowhead="odiamond",fontname="Helvetica"];
}
