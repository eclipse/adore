digraph "adore::apps::MapProvider"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{adore::apps::MapProvider\n|- subscriber_count_\l|+ setConfig()\l+ MapProvider()\l+ run()\l- parseTrackConfigs()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="base class for middleware dependent implementations of the map provider module"];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -motion_state_reader_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{adore::mad::AReader\l\< adore::env::VehicleMotion\lState9d \>\n||+ hasData()\l+ hasUpdate()\l+ getData()\l+ getDesc()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AReader.html",tooltip=" "];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -precedence_set_\n-precedence_set_local_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{adore::env::PrecedenceSet\n|- precedenceRT_\l|+ PrecedenceSet()\l+ PrecedenceSet()\l+ update()\l+ readFile()\l+ parseRule()\l+ insertRule()\l+ init()\l+ contains()\l+ eraseRule()\l+ getRulesInRegion()\l+ getAllRulesIt()\l+ getAllRules()\l+ getRulesOutsideRegion()\l+ refocus()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1PrecedenceSet.html",tooltip="PrecedenceSet contains PrecedenceRules, indexed by the area they affect."];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -ruleFeed_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{adore::mad::AFeed\<\l adore::env::PrecedenceRule \>\n||+ hasNext()\l+ getNext()\l+ getLatest()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AFeed.html",tooltip=" "];
  Node5 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +config_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{adore::apps::MapProvider\l::Config\n|+ trans_x_\l+ trans_y_\l+ trans_z_\l+ rot_x_\l+ rot_y_\l+ rot_z_\l+ rot_psi_\l|+ Config()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1apps_1_1MapProvider_1_1Config.html",tooltip=" "];
  Node6 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -border_output_\n-precedence_output_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{adore::mad::AWriter\< T \>\n||+ canWriteMore()\l+ write()\l+ getDesc()\l+ getNumberOfSubscribers()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AWriter.html",tooltip=" "];
  Node7 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -border_type_change\l_feed_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{adore::mad::AFeed\<\l adore::env::BorderTypeChange\lProfile \>\n||+ hasNext()\l+ getNext()\l+ getLatest()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1mad_1_1AFeed.html",tooltip=" "];
  Node8 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -figure_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{DLR_TS::PlotLab::FigureStubZMQ\n|- m_id\l|+ FigureStubZMQ()\l+ FigureStubZMQ()\l+ ~FigureStubZMQ()\l+ circlestrip()\l+ tristrip()\l+ tristrip()\l+ tristrip()\l+ patch()\l+ patch()\l+ patch()\land 28 more...\l# send_paint()\l# plotTexture()\l# send_paint()\l# send_other()\l# send_view()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classDLR__TS_1_1PlotLab_1_1FigureStubZMQ.html",tooltip=" "];
  Node9 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{DLR_TS::PlotLab::AFigureStub\n||+ ~AFigureStub()\l+ circlestrip()\l+ tristrip()\l+ tristrip()\l+ tristrip()\l+ patch()\l+ patch()\l+ patch()\l+ plot()\l+ plot()\land 27 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classDLR__TS_1_1PlotLab_1_1AFigureStub.html",tooltip=" "];
  Node10 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -m_other" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{ZMQObjectProvider\<\l DLR_TS::PlotLab::PLComOther \>\n|- m_socket\l- m_context\l- m_initialized\l|+ ZMQObjectProvider()\l+ ZMQObjectProvider()\l+ ~ZMQObjectProvider()\l+ send()\l- initialize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classZMQObjectProvider.html",tooltip=" "];
  Node11 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -m_view" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{ZMQObjectProvider\<\l DLR_TS::PlotLab::PLComView \>\n|- m_socket\l- m_context\l- m_initialized\l|+ ZMQObjectProvider()\l+ ZMQObjectProvider()\l+ ~ZMQObjectProvider()\l+ send()\l- initialize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classZMQObjectProvider.html",tooltip=" "];
  Node12 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -m_paint" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{ZMQObjectProvider\<\l DLR_TS::PlotLab::PLComPaint \>\n|- m_socket\l- m_context\l- m_initialized\l|+ ZMQObjectProvider()\l+ ZMQObjectProvider()\l+ ~ZMQObjectProvider()\l+ send()\l- initialize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classZMQObjectProvider.html",tooltip=" "];
  Node13 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -figure_factory_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 [label="{DLR_TS::PlotLab::FigureStub\lFactory\n|- m_context\l- m_url\l|+ FigureStubFactory()\l+ FigureStubFactory()\l+ createFigureStub()\l+ getDummy()\l+ parseCommandLine()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classDLR__TS_1_1PlotLab_1_1FigureStubFactory.html",tooltip=" "];
  Node14 -> Node13 [color="grey25",fontsize="10",style="solid",label=" -dummy" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 [label="{DLR_TS::PlotLab::DummyFigure\n||+ ~DummyFigure()\l+ circlestrip()\l+ tristrip()\l+ tristrip()\l+ tristrip()\l+ patch()\l+ patch()\l+ patch()\l+ plot()\l+ plot()\land 27 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classDLR__TS_1_1PlotLab_1_1DummyFigure.html",tooltip=" "];
  Node9 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node15 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -map_management_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 [label="{adore::env::MapBorderManagement\n|- m_updateQueue\l|+ MapBorderManagement()\l+ getSuccessors()\l+ getBordersAtPoint()\l+ init()\l+ getBorder()\l+ clearLocalMap()\l+ reset()\l+ getGlobalMap()\l+ deleteBordersInRegion()\l+ addBordersInRegion()\land 6 more...\l- initGlobalSet()\l- initBaseSet()\l- do_run()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1MapBorderManagement.html",tooltip="Automatically manage local map and necessary updates based on vehicle position and last state of obje..."];
  Node16 -> Node15 [color="grey25",fontsize="10",style="solid",label=" -m_baseSet\n-m_globalSet\n-m_localSet" ,arrowhead="odiamond",fontname="Helvetica"];
  Node16 [label="{adore::env::BorderBased\l::BorderSet\n|# m_coord_uncertainty_xy\l# m_coord_uncertainty_z\l# m_guard\l# m_max_lane_width\l# m_byID\l# m_byLeftID\l# m_byFirstCoord\l# m_byLastCoord\l# m_byRegion\l# m_isOwner\l- m_allowedBorderTypes\l|+ BorderSet()\l+ ~BorderSet()\l+ addAllowedType()\l+ rotate()\l+ translate()\l+ removeAllowedType()\l+ borderTypeValid()\l+ setIsOwner()\l+ insert_border()\l+ erase_border()\land 46 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1BorderSet.html",tooltip="efficiently store borders in boost R-tree"];
  Node17 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -params_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node17 [label="{adore::params::APMapProvider\n||+ getVisibiltyRadius()\l+ getActivatePlotting()\l+ getPlotCompleteMapInLocal\lView()\l+ useScenarioManagerMap()\l+ getXODRLoaderPointsPerBorder()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1params_1_1APMapProvider.html",tooltip="abstract class containing parameters to configure aspects of the map provider"];
}
