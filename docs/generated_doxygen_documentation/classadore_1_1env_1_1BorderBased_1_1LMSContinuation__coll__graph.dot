digraph "adore::env::BorderBased::LMSContinuation"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{adore::env::BorderBased\l::LMSContinuation\n|- m_lastMatch_initialized\l- m_delayedSwitching\l- m_a\l- m_b\l- m_c\l- m_d\l- m_w\l|+ LMSContinuation()\l+ setDimensions()\l+ getBestMatch()\l+ reset()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{adore::env::BorderBased\l::LaneMatchingStrategy\n||+ getBestMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1LaneMatchingStrategy.html",tooltip=" "];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_borderSet" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{adore::env::BorderBased\l::BorderSet\n|# m_coord_uncertainty_xy\l# m_coord_uncertainty_z\l# m_guard\l# m_max_lane_width\l# m_byID\l# m_byLeftID\l# m_byFirstCoord\l# m_byLastCoord\l# m_byRegion\l# m_isOwner\l- m_allowedBorderTypes\l|+ BorderSet()\l+ ~BorderSet()\l+ addAllowedType()\l+ rotate()\l+ translate()\l+ removeAllowedType()\l+ borderTypeValid()\l+ setIsOwner()\l+ insert_border()\l+ erase_border()\land 46 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1BorderSet.html",tooltip="efficiently store borders in boost R-tree"];
  Node4 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_lastMatch" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{adore::env::BorderBased\l::BorderID\n||+ BorderID()\l+ BorderID()\l+ translate()\l+ distance()\l+ distance()\l+ getLength()\l+ rotate()\l+ operator==()\l+ inverse()\l+ operator\<()\l+ toString()\l+ isInArea()\l+ getReverseDirectionID()\l+ getReverseDirectionID()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1BorderBased_1_1BorderID.html",tooltip="This struct identifies a Border by the coordinates of the starting and the end point."];
  Node5 -> Node4 [color="grey25",fontsize="10",style="solid",label=" +m_first\n+m_last" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{adore::env::BorderBased\l::Coordinate\n|+ m_X\l+ m_Y\l+ m_Z\l|+ Coordinate()\l+ Coordinate()\l+ Coordinate()\l+ Coordinate()\l+ translate()\l+ rotate()\l+ discretize()\l+ distance()\l+ isNear()\l+ operator==()\land 8 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structadore_1_1env_1_1BorderBased_1_1Coordinate.html",tooltip="This struct represents 3-dimensional coordines."];
  Node6 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_nearestLaneStragey" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{adore::env::BorderBased\l::LMSNearest\n|- m_w_orientation\l|+ LMSNearest()\l+ getBestMatch()\l+ getBestMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classadore_1_1env_1_1BorderBased_1_1LMSNearest.html",tooltip=" "];
  Node2 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 -> Node6 [color="grey25",fontsize="10",style="solid",label=" -m_borderSet" ,arrowhead="odiamond",fontname="Helvetica"];
}
